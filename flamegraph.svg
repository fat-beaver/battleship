<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1253.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="18810"><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="0.0106%" y="1173" width="0.0106%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1183.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="0.0106%" y="1157" width="0.0106%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="0.0106%" y="1141" width="0.0106%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.01%)</title><rect x="0.0106%" y="1125" width="0.0106%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1135.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.01%)</title><rect x="0.0106%" y="1109" width="0.0106%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1119.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.01%)</title><rect x="0.0106%" y="1093" width="0.0106%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="0.2606%" y="1103.50"></text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot (7 samples, 0.04%)</title><rect x="0.0000%" y="1189" width="0.0372%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1199.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (2 samples, 0.01%)</title><rect x="0.0266%" y="1173" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0266%" y="1157" width="0.0106%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0266%" y="1141" width="0.0106%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0266%" y="1125" width="0.0106%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (2 samples, 0.01%)</title><rect x="0.0266%" y="1109" width="0.0106%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1119.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="0.0266%" y="1093" width="0.0106%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="0.0266%" y="1077" width="0.0106%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="0.0266%" y="1061" width="0.0106%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.2766%" y="1071.50"></text></g><g><title>[libc.so.6] (8 samples, 0.04%)</title><rect x="0.0372%" y="1173" width="0.0425%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="8"/><text x="0.2872%" y="1183.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="0.0851%" y="1173" width="0.0159%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="3"/><text x="0.3351%" y="1183.50"></text></g><g><title>[[heap]] (13 samples, 0.07%)</title><rect x="0.0372%" y="1189" width="0.0691%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="13"/><text x="0.2872%" y="1199.50"></text></g><g><title>[[stack]] (2 samples, 0.01%)</title><rect x="0.1063%" y="1189" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="2"/><text x="0.3563%" y="1199.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (6 samples, 0.03%)</title><rect x="0.1170%" y="1173" width="0.0319%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="6"/><text x="0.3670%" y="1183.50"></text></g><g><title>[libc.so.6] (7 samples, 0.04%)</title><rect x="0.1489%" y="1173" width="0.0372%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="7"/><text x="0.3989%" y="1183.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="0.1914%" y="1173" width="0.0159%" height="15" fill="rgb(235,183,28)" fg:x="36" fg:w="3"/><text x="0.4414%" y="1183.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (4 samples, 0.02%)</title><rect x="0.2073%" y="1173" width="0.0213%" height="15" fill="rgb(221,5,38)" fg:x="39" fg:w="4"/><text x="0.4573%" y="1183.50"></text></g><g><title>[anon] (25 samples, 0.13%)</title><rect x="0.1170%" y="1189" width="0.1329%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="25"/><text x="0.3670%" y="1199.50"></text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (4 samples, 0.02%)</title><rect x="0.2286%" y="1173" width="0.0213%" height="15" fill="rgb(241,131,45)" fg:x="43" fg:w="4"/><text x="0.4786%" y="1183.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.03%)</title><rect x="0.2499%" y="1189" width="0.0319%" height="15" fill="rgb(249,31,29)" fg:x="47" fg:w="6"/><text x="0.4999%" y="1199.50"></text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot (6 samples, 0.03%)</title><rect x="0.2818%" y="1173" width="0.0319%" height="15" fill="rgb(225,111,53)" fg:x="53" fg:w="6"/><text x="0.5318%" y="1183.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (3 samples, 0.02%)</title><rect x="0.3137%" y="1173" width="0.0159%" height="15" fill="rgb(238,160,17)" fg:x="59" fg:w="3"/><text x="0.5637%" y="1183.50"></text></g><g><title>[libc.so.6] (18 samples, 0.10%)</title><rect x="0.3296%" y="1173" width="0.0957%" height="15" fill="rgb(214,148,48)" fg:x="62" fg:w="18"/><text x="0.5796%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (4 samples, 0.02%)</title><rect x="0.4253%" y="1173" width="0.0213%" height="15" fill="rgb(232,36,49)" fg:x="80" fg:w="4"/><text x="0.6753%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (2 samples, 0.01%)</title><rect x="0.4359%" y="1157" width="0.0106%" height="15" fill="rgb(209,103,24)" fg:x="82" fg:w="2"/><text x="0.6859%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (2 samples, 0.01%)</title><rect x="0.4359%" y="1141" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="82" fg:w="2"/><text x="0.6859%" y="1151.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.08%)</title><rect x="0.4466%" y="1173" width="0.0797%" height="15" fill="rgb(213,181,19)" fg:x="84" fg:w="15"/><text x="0.6966%" y="1183.50"></text></g><g><title>cfree (6 samples, 0.03%)</title><rect x="0.5263%" y="1173" width="0.0319%" height="15" fill="rgb(254,191,54)" fg:x="99" fg:w="6"/><text x="0.7763%" y="1183.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3 samples, 0.02%)</title><rect x="0.5582%" y="1173" width="0.0159%" height="15" fill="rgb(241,83,37)" fg:x="105" fg:w="3"/><text x="0.8082%" y="1183.50"></text></g><g><title>[unknown] (58 samples, 0.31%)</title><rect x="0.2818%" y="1189" width="0.3083%" height="15" fill="rgb(233,36,39)" fg:x="53" fg:w="58"/><text x="0.5318%" y="1199.50"></text></g><g><title>rayon_core::registry::Registry::pop_injected_job (3 samples, 0.02%)</title><rect x="0.9091%" y="869" width="0.0159%" height="15" fill="rgb(226,3,54)" fg:x="171" fg:w="3"/><text x="1.1591%" y="879.50"></text></g><g><title>crossbeam_deque::deque::Injector&lt;T&gt;::steal (2 samples, 0.01%)</title><rect x="0.9144%" y="853" width="0.0106%" height="15" fill="rgb(245,192,40)" fg:x="172" fg:w="2"/><text x="1.1644%" y="863.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (3 samples, 0.02%)</title><rect x="0.9250%" y="789" width="0.0159%" height="15" fill="rgb(238,167,29)" fg:x="174" fg:w="3"/><text x="1.1750%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 0.02%)</title><rect x="0.9250%" y="773" width="0.0159%" height="15" fill="rgb(232,182,51)" fg:x="174" fg:w="3"/><text x="1.1750%" y="783.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (3 samples, 0.02%)</title><rect x="0.9250%" y="757" width="0.0159%" height="15" fill="rgb(231,60,39)" fg:x="174" fg:w="3"/><text x="1.1750%" y="767.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.02%)</title><rect x="0.9250%" y="741" width="0.0159%" height="15" fill="rgb(208,69,12)" fg:x="174" fg:w="3"/><text x="1.1750%" y="751.50"></text></g><g><title>crossbeam_epoch::default::pin (2 samples, 0.01%)</title><rect x="0.9304%" y="725" width="0.0106%" height="15" fill="rgb(235,93,37)" fg:x="175" fg:w="2"/><text x="1.1804%" y="735.50"></text></g><g><title>crossbeam_epoch::default::with_handle (2 samples, 0.01%)</title><rect x="0.9304%" y="709" width="0.0106%" height="15" fill="rgb(213,116,39)" fg:x="175" fg:w="2"/><text x="1.1804%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.01%)</title><rect x="0.9304%" y="693" width="0.0106%" height="15" fill="rgb(222,207,29)" fg:x="175" fg:w="2"/><text x="1.1804%" y="703.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (2 samples, 0.01%)</title><rect x="0.9304%" y="677" width="0.0106%" height="15" fill="rgb(206,96,30)" fg:x="175" fg:w="2"/><text x="1.1804%" y="687.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (2 samples, 0.01%)</title><rect x="0.9304%" y="661" width="0.0106%" height="15" fill="rgb(218,138,4)" fg:x="175" fg:w="2"/><text x="1.1804%" y="671.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (2 samples, 0.01%)</title><rect x="0.9304%" y="645" width="0.0106%" height="15" fill="rgb(250,191,14)" fg:x="175" fg:w="2"/><text x="1.1804%" y="655.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (2 samples, 0.01%)</title><rect x="0.9304%" y="629" width="0.0106%" height="15" fill="rgb(239,60,40)" fg:x="175" fg:w="2"/><text x="1.1804%" y="639.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (3 samples, 0.02%)</title><rect x="0.9516%" y="597" width="0.0159%" height="15" fill="rgb(206,27,48)" fg:x="179" fg:w="3"/><text x="1.2016%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (3 samples, 0.02%)</title><rect x="0.9516%" y="581" width="0.0159%" height="15" fill="rgb(225,35,8)" fg:x="179" fg:w="3"/><text x="1.2016%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.02%)</title><rect x="0.9516%" y="565" width="0.0159%" height="15" fill="rgb(250,213,24)" fg:x="179" fg:w="3"/><text x="1.2016%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (22 samples, 0.12%)</title><rect x="0.9091%" y="901" width="0.1170%" height="15" fill="rgb(247,123,22)" fg:x="171" fg:w="22"/><text x="1.1591%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold::{{closure}} (22 samples, 0.12%)</title><rect x="0.9091%" y="885" width="0.1170%" height="15" fill="rgb(231,138,38)" fg:x="171" fg:w="22"/><text x="1.1591%" y="895.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (19 samples, 0.10%)</title><rect x="0.9250%" y="869" width="0.1010%" height="15" fill="rgb(231,145,46)" fg:x="174" fg:w="19"/><text x="1.1750%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (19 samples, 0.10%)</title><rect x="0.9250%" y="853" width="0.1010%" height="15" fill="rgb(251,118,11)" fg:x="174" fg:w="19"/><text x="1.1750%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 0.10%)</title><rect x="0.9250%" y="837" width="0.1010%" height="15" fill="rgb(217,147,25)" fg:x="174" fg:w="19"/><text x="1.1750%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 0.10%)</title><rect x="0.9250%" y="821" width="0.1010%" height="15" fill="rgb(247,81,37)" fg:x="174" fg:w="19"/><text x="1.1750%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 0.10%)</title><rect x="0.9250%" y="805" width="0.1010%" height="15" fill="rgb(209,12,38)" fg:x="174" fg:w="19"/><text x="1.1750%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (16 samples, 0.09%)</title><rect x="0.9410%" y="789" width="0.0851%" height="15" fill="rgb(227,1,9)" fg:x="177" fg:w="16"/><text x="1.1910%" y="799.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (16 samples, 0.09%)</title><rect x="0.9410%" y="773" width="0.0851%" height="15" fill="rgb(248,47,43)" fg:x="177" fg:w="16"/><text x="1.1910%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (16 samples, 0.09%)</title><rect x="0.9410%" y="757" width="0.0851%" height="15" fill="rgb(221,10,30)" fg:x="177" fg:w="16"/><text x="1.1910%" y="767.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (16 samples, 0.09%)</title><rect x="0.9410%" y="741" width="0.0851%" height="15" fill="rgb(210,229,1)" fg:x="177" fg:w="16"/><text x="1.1910%" y="751.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (16 samples, 0.09%)</title><rect x="0.9410%" y="725" width="0.0851%" height="15" fill="rgb(222,148,37)" fg:x="177" fg:w="16"/><text x="1.1910%" y="735.50"></text></g><g><title>crossbeam_epoch::default::pin (14 samples, 0.07%)</title><rect x="0.9516%" y="709" width="0.0744%" height="15" fill="rgb(234,67,33)" fg:x="179" fg:w="14"/><text x="1.2016%" y="719.50"></text></g><g><title>crossbeam_epoch::default::with_handle (14 samples, 0.07%)</title><rect x="0.9516%" y="693" width="0.0744%" height="15" fill="rgb(247,98,35)" fg:x="179" fg:w="14"/><text x="1.2016%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.07%)</title><rect x="0.9516%" y="677" width="0.0744%" height="15" fill="rgb(247,138,52)" fg:x="179" fg:w="14"/><text x="1.2016%" y="687.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (14 samples, 0.07%)</title><rect x="0.9516%" y="661" width="0.0744%" height="15" fill="rgb(213,79,30)" fg:x="179" fg:w="14"/><text x="1.2016%" y="671.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (14 samples, 0.07%)</title><rect x="0.9516%" y="645" width="0.0744%" height="15" fill="rgb(246,177,23)" fg:x="179" fg:w="14"/><text x="1.2016%" y="655.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (14 samples, 0.07%)</title><rect x="0.9516%" y="629" width="0.0744%" height="15" fill="rgb(230,62,27)" fg:x="179" fg:w="14"/><text x="1.2016%" y="639.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (14 samples, 0.07%)</title><rect x="0.9516%" y="613" width="0.0744%" height="15" fill="rgb(216,154,8)" fg:x="179" fg:w="14"/><text x="1.2016%" y="623.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (10 samples, 0.05%)</title><rect x="0.9729%" y="597" width="0.0532%" height="15" fill="rgb(244,35,45)" fg:x="183" fg:w="10"/><text x="1.2229%" y="607.50"></text></g><g><title>crossbeam_epoch::sync::queue::Queue&lt;T&gt;::try_pop_if (10 samples, 0.05%)</title><rect x="0.9729%" y="581" width="0.0532%" height="15" fill="rgb(251,115,12)" fg:x="183" fg:w="10"/><text x="1.2229%" y="591.50"></text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::new_game (2 samples, 0.01%)</title><rect x="1.0473%" y="581" width="0.0106%" height="15" fill="rgb(240,54,50)" fg:x="197" fg:w="2"/><text x="1.2973%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;battleship::ai_player::Action&gt;&gt; (2 samples, 0.01%)</title><rect x="1.0473%" y="565" width="0.0106%" height="15" fill="rgb(233,84,52)" fg:x="197" fg:w="2"/><text x="1.2973%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;battleship::ai_player::Action&gt;&gt; (2 samples, 0.01%)</title><rect x="1.0473%" y="549" width="0.0106%" height="15" fill="rgb(207,117,47)" fg:x="197" fg:w="2"/><text x="1.2973%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="1.0473%" y="533" width="0.0106%" height="15" fill="rgb(249,43,39)" fg:x="197" fg:w="2"/><text x="1.2973%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="1.0473%" y="517" width="0.0106%" height="15" fill="rgb(209,38,44)" fg:x="197" fg:w="2"/><text x="1.2973%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="1.0473%" y="501" width="0.0106%" height="15" fill="rgb(236,212,23)" fg:x="197" fg:w="2"/><text x="1.2973%" y="511.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="1.0473%" y="485" width="0.0106%" height="15" fill="rgb(242,79,21)" fg:x="197" fg:w="2"/><text x="1.2973%" y="495.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="1.0473%" y="469" width="0.0106%" height="15" fill="rgb(211,96,35)" fg:x="197" fg:w="2"/><text x="1.2973%" y="479.50"></text></g><g><title>battleship::game::TargetBoard::new (3 samples, 0.02%)</title><rect x="1.0579%" y="565" width="0.0159%" height="15" fill="rgb(253,215,40)" fg:x="199" fg:w="3"/><text x="1.3079%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::convert::From&lt;[T: N]&gt;&gt;::from (3 samples, 0.02%)</title><rect x="1.0579%" y="549" width="0.0159%" height="15" fill="rgb(211,81,21)" fg:x="199" fg:w="3"/><text x="1.3079%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="1.0579%" y="533" width="0.0159%" height="15" fill="rgb(208,190,38)" fg:x="199" fg:w="3"/><text x="1.3079%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="1.0579%" y="517" width="0.0159%" height="15" fill="rgb(235,213,38)" fg:x="199" fg:w="3"/><text x="1.3079%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="1.0579%" y="501" width="0.0159%" height="15" fill="rgb(237,122,38)" fg:x="199" fg:w="3"/><text x="1.3079%" y="511.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="1.0579%" y="485" width="0.0159%" height="15" fill="rgb(244,218,35)" fg:x="199" fg:w="3"/><text x="1.3079%" y="495.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="1.0579%" y="469" width="0.0159%" height="15" fill="rgb(240,68,47)" fg:x="199" fg:w="3"/><text x="1.3079%" y="479.50"></text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::place_ships (6 samples, 0.03%)</title><rect x="1.0579%" y="581" width="0.0319%" height="15" fill="rgb(210,16,53)" fg:x="199" fg:w="6"/><text x="1.3079%" y="591.50"></text></g><g><title>battleship::game::TargetBoard::place_ship (3 samples, 0.02%)</title><rect x="1.0739%" y="565" width="0.0159%" height="15" fill="rgb(235,124,12)" fg:x="202" fg:w="3"/><text x="1.3239%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="1.0792%" y="549" width="0.0106%" height="15" fill="rgb(224,169,11)" fg:x="203" fg:w="2"/><text x="1.3292%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="1.0792%" y="533" width="0.0106%" height="15" fill="rgb(250,166,2)" fg:x="203" fg:w="2"/><text x="1.3292%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="1.0792%" y="517" width="0.0106%" height="15" fill="rgb(242,216,29)" fg:x="203" fg:w="2"/><text x="1.3292%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="1.0792%" y="501" width="0.0106%" height="15" fill="rgb(230,116,27)" fg:x="203" fg:w="2"/><text x="1.3292%" y="511.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="1.0792%" y="485" width="0.0106%" height="15" fill="rgb(228,99,48)" fg:x="203" fg:w="2"/><text x="1.3292%" y="495.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="1.0792%" y="469" width="0.0106%" height="15" fill="rgb(253,11,6)" fg:x="203" fg:w="2"/><text x="1.3292%" y="479.50"></text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::reset (10 samples, 0.05%)</title><rect x="1.0473%" y="597" width="0.0532%" height="15" fill="rgb(247,143,39)" fg:x="197" fg:w="10"/><text x="1.2973%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;battleship::game::TargetBoard&gt; (2 samples, 0.01%)</title><rect x="1.0898%" y="581" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="205" fg:w="2"/><text x="1.3398%" y="591.50"></text></g><g><title>&lt;nalgebra::base::array_storage::ArrayStorage&lt;T,_,_&gt; as core::clone::Clone&gt;::clone (9 samples, 0.05%)</title><rect x="1.1749%" y="549" width="0.0478%" height="15" fill="rgb(233,208,19)" fg:x="221" fg:w="9"/><text x="1.4249%" y="559.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (9 samples, 0.05%)</title><rect x="1.1749%" y="533" width="0.0478%" height="15" fill="rgb(216,164,2)" fg:x="221" fg:w="9"/><text x="1.4249%" y="543.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (9 samples, 0.05%)</title><rect x="1.1749%" y="517" width="0.0478%" height="15" fill="rgb(220,129,5)" fg:x="221" fg:w="9"/><text x="1.4249%" y="527.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="1.1749%" y="501" width="0.0478%" height="15" fill="rgb(242,17,10)" fg:x="221" fg:w="9"/><text x="1.4249%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.40%)</title><rect x="1.2334%" y="421" width="0.3987%" height="15" fill="rgb(242,107,0)" fg:x="232" fg:w="75"/><text x="1.4834%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.40%)</title><rect x="1.2334%" y="405" width="0.3987%" height="15" fill="rgb(251,28,31)" fg:x="232" fg:w="75"/><text x="1.4834%" y="415.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.40%)</title><rect x="1.2334%" y="389" width="0.3987%" height="15" fill="rgb(233,223,10)" fg:x="232" fg:w="75"/><text x="1.4834%" y="399.50"></text></g><g><title>malloc (74 samples, 0.39%)</title><rect x="1.2387%" y="373" width="0.3934%" height="15" fill="rgb(215,21,27)" fg:x="233" fg:w="74"/><text x="1.4887%" y="383.50"></text></g><g><title>[libc.so.6] (35 samples, 0.19%)</title><rect x="1.4460%" y="357" width="0.1861%" height="15" fill="rgb(232,23,21)" fg:x="272" fg:w="35"/><text x="1.6960%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="1.6215%" y="341" width="0.0106%" height="15" fill="rgb(244,5,23)" fg:x="305" fg:w="2"/><text x="1.8715%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (76 samples, 0.40%)</title><rect x="1.2334%" y="469" width="0.4040%" height="15" fill="rgb(226,81,46)" fg:x="232" fg:w="76"/><text x="1.4834%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.40%)</title><rect x="1.2334%" y="453" width="0.4040%" height="15" fill="rgb(247,70,30)" fg:x="232" fg:w="76"/><text x="1.4834%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 0.40%)</title><rect x="1.2334%" y="437" width="0.4040%" height="15" fill="rgb(212,68,19)" fg:x="232" fg:w="76"/><text x="1.4834%" y="447.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (2,188 samples, 11.63%)</title><rect x="1.1643%" y="565" width="11.6321%" height="15" fill="rgb(240,187,13)" fg:x="219" fg:w="2188"/><text x="1.4143%" y="575.50">&lt;nalgebra::base::..</text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (2,177 samples, 11.57%)</title><rect x="1.2228%" y="549" width="11.5736%" height="15" fill="rgb(223,113,26)" fg:x="230" fg:w="2177"/><text x="1.4728%" y="559.50">&lt;nalgebra::base::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,177 samples, 11.57%)</title><rect x="1.2228%" y="533" width="11.5736%" height="15" fill="rgb(206,192,2)" fg:x="230" fg:w="2177"/><text x="1.4728%" y="543.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,175 samples, 11.56%)</title><rect x="1.2334%" y="517" width="11.5630%" height="15" fill="rgb(241,108,4)" fg:x="232" fg:w="2175"/><text x="1.4834%" y="527.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (2,175 samples, 11.56%)</title><rect x="1.2334%" y="501" width="11.5630%" height="15" fill="rgb(247,173,49)" fg:x="232" fg:w="2175"/><text x="1.4834%" y="511.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,175 samples, 11.56%)</title><rect x="1.2334%" y="485" width="11.5630%" height="15" fill="rgb(224,114,35)" fg:x="232" fg:w="2175"/><text x="1.4834%" y="495.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,099 samples, 11.16%)</title><rect x="1.6374%" y="469" width="11.1590%" height="15" fill="rgb(245,159,27)" fg:x="308" fg:w="2099"/><text x="1.8874%" y="479.50">core::ptr::const..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,099 samples, 11.16%)</title><rect x="1.6374%" y="453" width="11.1590%" height="15" fill="rgb(245,172,44)" fg:x="308" fg:w="2099"/><text x="1.8874%" y="463.50">core::intrinsics..</text></g><g><title>[libc.so.6] (2,099 samples, 11.16%)</title><rect x="1.6374%" y="437" width="11.1590%" height="15" fill="rgb(236,23,11)" fg:x="308" fg:w="2099"/><text x="1.8874%" y="447.50">[libc.so.6]</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (6 samples, 0.03%)</title><rect x="12.7964%" y="549" width="0.0319%" height="15" fill="rgb(205,117,38)" fg:x="2407" fg:w="6"/><text x="13.0464%" y="559.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.02%)</title><rect x="12.8070%" y="533" width="0.0213%" height="15" fill="rgb(237,72,25)" fg:x="2409" fg:w="4"/><text x="13.0570%" y="543.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.02%)</title><rect x="12.8070%" y="517" width="0.0213%" height="15" fill="rgb(244,70,9)" fg:x="2409" fg:w="4"/><text x="13.0570%" y="527.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="12.8070%" y="501" width="0.0213%" height="15" fill="rgb(217,125,39)" fg:x="2409" fg:w="4"/><text x="13.0570%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="12.8070%" y="485" width="0.0213%" height="15" fill="rgb(235,36,10)" fg:x="2409" fg:w="4"/><text x="13.0570%" y="495.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (4 samples, 0.02%)</title><rect x="12.8070%" y="469" width="0.0213%" height="15" fill="rgb(251,123,47)" fg:x="2409" fg:w="4"/><text x="13.0570%" y="479.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.01%)</title><rect x="12.8177%" y="453" width="0.0106%" height="15" fill="rgb(221,13,13)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="463.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="12.8177%" y="437" width="0.0106%" height="15" fill="rgb(238,131,9)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="447.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="12.8177%" y="421" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="431.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.01%)</title><rect x="12.8177%" y="405" width="0.0106%" height="15" fill="rgb(245,182,24)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.01%)</title><rect x="12.8177%" y="389" width="0.0106%" height="15" fill="rgb(242,14,37)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="399.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.01%)</title><rect x="12.8177%" y="373" width="0.0106%" height="15" fill="rgb(246,228,12)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.01%)</title><rect x="12.8177%" y="357" width="0.0106%" height="15" fill="rgb(213,55,15)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="367.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.01%)</title><rect x="12.8177%" y="341" width="0.0106%" height="15" fill="rgb(209,9,3)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="351.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.01%)</title><rect x="12.8177%" y="325" width="0.0106%" height="15" fill="rgb(230,59,30)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="335.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.01%)</title><rect x="12.8177%" y="309" width="0.0106%" height="15" fill="rgb(209,121,21)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="319.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.01%)</title><rect x="12.8177%" y="293" width="0.0106%" height="15" fill="rgb(220,109,13)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="303.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (2 samples, 0.01%)</title><rect x="12.8177%" y="277" width="0.0106%" height="15" fill="rgb(232,18,1)" fg:x="2411" fg:w="2"/><text x="13.0677%" y="287.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (33 samples, 0.18%)</title><rect x="12.8283%" y="549" width="0.1754%" height="15" fill="rgb(215,41,42)" fg:x="2413" fg:w="33"/><text x="13.0783%" y="559.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (50 samples, 0.27%)</title><rect x="12.7964%" y="565" width="0.2658%" height="15" fill="rgb(224,123,36)" fg:x="2407" fg:w="50"/><text x="13.0464%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (11 samples, 0.06%)</title><rect x="13.0037%" y="549" width="0.0585%" height="15" fill="rgb(240,125,3)" fg:x="2446" fg:w="11"/><text x="13.2537%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (56 samples, 0.30%)</title><rect x="13.0781%" y="501" width="0.2977%" height="15" fill="rgb(205,98,50)" fg:x="2460" fg:w="56"/><text x="13.3281%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (56 samples, 0.30%)</title><rect x="13.0781%" y="485" width="0.2977%" height="15" fill="rgb(205,185,37)" fg:x="2460" fg:w="56"/><text x="13.3281%" y="495.50"></text></g><g><title>alloc::alloc::realloc (56 samples, 0.30%)</title><rect x="13.0781%" y="469" width="0.2977%" height="15" fill="rgb(238,207,15)" fg:x="2460" fg:w="56"/><text x="13.3281%" y="479.50"></text></g><g><title>realloc (56 samples, 0.30%)</title><rect x="13.0781%" y="453" width="0.2977%" height="15" fill="rgb(213,199,42)" fg:x="2460" fg:w="56"/><text x="13.3281%" y="463.50"></text></g><g><title>[libc.so.6] (54 samples, 0.29%)</title><rect x="13.0888%" y="437" width="0.2871%" height="15" fill="rgb(235,201,11)" fg:x="2462" fg:w="54"/><text x="13.3388%" y="447.50"></text></g><g><title>[libc.so.6] (53 samples, 0.28%)</title><rect x="13.0941%" y="421" width="0.2818%" height="15" fill="rgb(207,46,11)" fg:x="2463" fg:w="53"/><text x="13.3441%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="13.3599%" y="405" width="0.0159%" height="15" fill="rgb(241,35,35)" fg:x="2513" fg:w="3"/><text x="13.6099%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (59 samples, 0.31%)</title><rect x="13.0781%" y="517" width="0.3137%" height="15" fill="rgb(243,32,47)" fg:x="2460" fg:w="59"/><text x="13.3281%" y="527.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="13.3759%" y="501" width="0.0159%" height="15" fill="rgb(247,202,23)" fg:x="2516" fg:w="3"/><text x="13.6259%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (62 samples, 0.33%)</title><rect x="13.0728%" y="549" width="0.3296%" height="15" fill="rgb(219,102,11)" fg:x="2459" fg:w="62"/><text x="13.3228%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 0.33%)</title><rect x="13.0728%" y="533" width="0.3296%" height="15" fill="rgb(243,110,44)" fg:x="2459" fg:w="62"/><text x="13.3228%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="13.3918%" y="517" width="0.0106%" height="15" fill="rgb(222,74,54)" fg:x="2519" fg:w="2"/><text x="13.6418%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (129 samples, 0.69%)</title><rect x="13.0622%" y="565" width="0.6858%" height="15" fill="rgb(216,99,12)" fg:x="2457" fg:w="129"/><text x="13.3122%" y="575.50"></text></g><g><title>core::ptr::write (64 samples, 0.34%)</title><rect x="13.4078%" y="549" width="0.3402%" height="15" fill="rgb(226,22,26)" fg:x="2522" fg:w="64"/><text x="13.6578%" y="559.50"></text></g><g><title>[libc.so.6] (63 samples, 0.33%)</title><rect x="13.4131%" y="533" width="0.3349%" height="15" fill="rgb(217,163,10)" fg:x="2523" fg:w="63"/><text x="13.6631%" y="543.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="13.7586%" y="469" width="0.0106%" height="15" fill="rgb(213,25,53)" fg:x="2588" fg:w="2"/><text x="14.0086%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::distributions::weighted_index::WeightedIndex&lt;u32&gt;&gt; (10 samples, 0.05%)</title><rect x="13.7480%" y="565" width="0.0532%" height="15" fill="rgb(252,105,26)" fg:x="2586" fg:w="10"/><text x="13.9980%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (10 samples, 0.05%)</title><rect x="13.7480%" y="549" width="0.0532%" height="15" fill="rgb(220,39,43)" fg:x="2586" fg:w="10"/><text x="13.9980%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (10 samples, 0.05%)</title><rect x="13.7480%" y="533" width="0.0532%" height="15" fill="rgb(229,68,48)" fg:x="2586" fg:w="10"/><text x="13.9980%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.05%)</title><rect x="13.7480%" y="517" width="0.0532%" height="15" fill="rgb(252,8,32)" fg:x="2586" fg:w="10"/><text x="13.9980%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.05%)</title><rect x="13.7533%" y="501" width="0.0478%" height="15" fill="rgb(223,20,43)" fg:x="2587" fg:w="9"/><text x="14.0033%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.05%)</title><rect x="13.7533%" y="485" width="0.0478%" height="15" fill="rgb(229,81,49)" fg:x="2587" fg:w="9"/><text x="14.0033%" y="495.50"></text></g><g><title>cfree (6 samples, 0.03%)</title><rect x="13.7693%" y="469" width="0.0319%" height="15" fill="rgb(236,28,36)" fg:x="2590" fg:w="6"/><text x="14.0193%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="13.7852%" y="453" width="0.0159%" height="15" fill="rgb(249,185,26)" fg:x="2593" fg:w="3"/><text x="14.0352%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (8 samples, 0.04%)</title><rect x="13.8012%" y="565" width="0.0425%" height="15" fill="rgb(249,174,33)" fg:x="2596" fg:w="8"/><text x="14.0512%" y="575.50"></text></g><g><title>nalgebra::base::componentwise::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::component_mul_assign (38 samples, 0.20%)</title><rect x="13.8437%" y="565" width="0.2020%" height="15" fill="rgb(233,201,37)" fg:x="2604" fg:w="38"/><text x="14.0937%" y="575.50"></text></g><g><title>&lt;u32 as core::ops::arith::MulAssign&gt;::mul_assign (33 samples, 0.18%)</title><rect x="13.8703%" y="549" width="0.1754%" height="15" fill="rgb(221,78,26)" fg:x="2609" fg:w="33"/><text x="14.1203%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.09%)</title><rect x="14.0457%" y="469" width="0.0851%" height="15" fill="rgb(250,127,30)" fg:x="2642" fg:w="16"/><text x="14.2957%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.09%)</title><rect x="14.0457%" y="453" width="0.0851%" height="15" fill="rgb(230,49,44)" fg:x="2642" fg:w="16"/><text x="14.2957%" y="463.50"></text></g><g><title>cfree (14 samples, 0.07%)</title><rect x="14.0564%" y="437" width="0.0744%" height="15" fill="rgb(229,67,23)" fg:x="2644" fg:w="14"/><text x="14.3064%" y="447.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="14.0829%" y="421" width="0.0478%" height="15" fill="rgb(249,83,47)" fg:x="2649" fg:w="9"/><text x="14.3329%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (17 samples, 0.09%)</title><rect x="14.0457%" y="549" width="0.0904%" height="15" fill="rgb(215,43,3)" fg:x="2642" fg:w="17"/><text x="14.2957%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (17 samples, 0.09%)</title><rect x="14.0457%" y="533" width="0.0904%" height="15" fill="rgb(238,154,13)" fg:x="2642" fg:w="17"/><text x="14.2957%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (17 samples, 0.09%)</title><rect x="14.0457%" y="517" width="0.0904%" height="15" fill="rgb(219,56,2)" fg:x="2642" fg:w="17"/><text x="14.2957%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (17 samples, 0.09%)</title><rect x="14.0457%" y="501" width="0.0904%" height="15" fill="rgb(233,0,4)" fg:x="2642" fg:w="17"/><text x="14.2957%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.09%)</title><rect x="14.0457%" y="485" width="0.0904%" height="15" fill="rgb(235,30,7)" fg:x="2642" fg:w="17"/><text x="14.2957%" y="495.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,nalgebra::base::dimension::Dynamic,C&gt; as nalgebra::base::storage::RawStorage&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::as_slice_unchecked (2 samples, 0.01%)</title><rect x="14.1627%" y="517" width="0.0106%" height="15" fill="rgb(250,79,13)" fg:x="2664" fg:w="2"/><text x="14.4127%" y="527.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (17 samples, 0.09%)</title><rect x="14.1733%" y="517" width="0.0904%" height="15" fill="rgb(211,146,34)" fg:x="2666" fg:w="17"/><text x="14.4233%" y="527.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (50 samples, 0.27%)</title><rect x="14.0457%" y="565" width="0.2658%" height="15" fill="rgb(228,22,38)" fg:x="2642" fg:w="50"/><text x="14.2957%" y="575.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (33 samples, 0.18%)</title><rect x="14.1361%" y="549" width="0.1754%" height="15" fill="rgb(235,168,5)" fg:x="2659" fg:w="33"/><text x="14.3861%" y="559.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (33 samples, 0.18%)</title><rect x="14.1361%" y="533" width="0.1754%" height="15" fill="rgb(221,155,16)" fg:x="2659" fg:w="33"/><text x="14.3861%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.05%)</title><rect x="14.2637%" y="517" width="0.0478%" height="15" fill="rgb(215,215,53)" fg:x="2683" fg:w="9"/><text x="14.5137%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.05%)</title><rect x="14.2637%" y="501" width="0.0478%" height="15" fill="rgb(223,4,10)" fg:x="2683" fg:w="9"/><text x="14.5137%" y="511.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (6 samples, 0.03%)</title><rect x="14.2796%" y="485" width="0.0319%" height="15" fill="rgb(234,103,6)" fg:x="2686" fg:w="6"/><text x="14.5296%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (6 samples, 0.03%)</title><rect x="14.2796%" y="469" width="0.0319%" height="15" fill="rgb(227,97,0)" fg:x="2686" fg:w="6"/><text x="14.5296%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 0.43%)</title><rect x="14.3594%" y="469" width="0.4253%" height="15" fill="rgb(234,150,53)" fg:x="2701" fg:w="80"/><text x="14.6094%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (80 samples, 0.43%)</title><rect x="14.3594%" y="453" width="0.4253%" height="15" fill="rgb(228,201,54)" fg:x="2701" fg:w="80"/><text x="14.6094%" y="463.50"></text></g><g><title>cfree (79 samples, 0.42%)</title><rect x="14.3647%" y="437" width="0.4200%" height="15" fill="rgb(222,22,37)" fg:x="2702" fg:w="79"/><text x="14.6147%" y="447.50"></text></g><g><title>[libc.so.6] (56 samples, 0.30%)</title><rect x="14.4870%" y="421" width="0.2977%" height="15" fill="rgb(237,53,32)" fg:x="2725" fg:w="56"/><text x="14.7370%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;&gt; (89 samples, 0.47%)</title><rect x="14.3222%" y="549" width="0.4732%" height="15" fill="rgb(233,25,53)" fg:x="2694" fg:w="89"/><text x="14.5722%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; (89 samples, 0.47%)</title><rect x="14.3222%" y="533" width="0.4732%" height="15" fill="rgb(210,40,34)" fg:x="2694" fg:w="89"/><text x="14.5722%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (89 samples, 0.47%)</title><rect x="14.3222%" y="517" width="0.4732%" height="15" fill="rgb(241,220,44)" fg:x="2694" fg:w="89"/><text x="14.5722%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (89 samples, 0.47%)</title><rect x="14.3222%" y="501" width="0.4732%" height="15" fill="rgb(235,28,35)" fg:x="2694" fg:w="89"/><text x="14.5722%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.47%)</title><rect x="14.3222%" y="485" width="0.4732%" height="15" fill="rgb(210,56,17)" fg:x="2694" fg:w="89"/><text x="14.5722%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="14.7847%" y="469" width="0.0106%" height="15" fill="rgb(224,130,29)" fg:x="2781" fg:w="2"/><text x="15.0347%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (58 samples, 0.31%)</title><rect x="14.8006%" y="501" width="0.3083%" height="15" fill="rgb(235,212,8)" fg:x="2784" fg:w="58"/><text x="15.0506%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (58 samples, 0.31%)</title><rect x="14.8006%" y="485" width="0.3083%" height="15" fill="rgb(223,33,50)" fg:x="2784" fg:w="58"/><text x="15.0506%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (18 samples, 0.10%)</title><rect x="15.0133%" y="469" width="0.0957%" height="15" fill="rgb(219,149,13)" fg:x="2824" fg:w="18"/><text x="15.2633%" y="479.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (7 samples, 0.04%)</title><rect x="15.1675%" y="469" width="0.0372%" height="15" fill="rgb(250,156,29)" fg:x="2853" fg:w="7"/><text x="15.4175%" y="479.50"></text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (40 samples, 0.21%)</title><rect x="15.2047%" y="469" width="0.2127%" height="15" fill="rgb(216,193,19)" fg:x="2860" fg:w="40"/><text x="15.4547%" y="479.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axc (65 samples, 0.35%)</title><rect x="15.1090%" y="485" width="0.3456%" height="15" fill="rgb(216,135,14)" fg:x="2842" fg:w="65"/><text x="15.3590%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.04%)</title><rect x="15.4173%" y="469" width="0.0372%" height="15" fill="rgb(241,47,5)" fg:x="2900" fg:w="7"/><text x="15.6673%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.04%)</title><rect x="15.4173%" y="453" width="0.0372%" height="15" fill="rgb(233,42,35)" fg:x="2900" fg:w="7"/><text x="15.6673%" y="463.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.03%)</title><rect x="15.4280%" y="437" width="0.0266%" height="15" fill="rgb(231,13,6)" fg:x="2902" fg:w="5"/><text x="15.6780%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (5 samples, 0.03%)</title><rect x="15.4280%" y="421" width="0.0266%" height="15" fill="rgb(207,181,40)" fg:x="2902" fg:w="5"/><text x="15.6780%" y="431.50"></text></g><g><title>&lt;u32 as core::ops::arith::Add&gt;::add (1,701 samples, 9.04%)</title><rect x="21.9245%" y="469" width="9.0431%" height="15" fill="rgb(254,173,49)" fg:x="4124" fg:w="1701"/><text x="22.1745%" y="479.50">&lt;u32 as core:..</text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (2,641 samples, 14.04%)</title><rect x="30.9676%" y="469" width="14.0404%" height="15" fill="rgb(221,1,38)" fg:x="5825" fg:w="2641"/><text x="31.2176%" y="479.50">&lt;u32 as core::ops::ar..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (290 samples, 1.54%)</title><rect x="46.2360%" y="437" width="1.5417%" height="15" fill="rgb(206,124,46)" fg:x="8697" fg:w="290"/><text x="46.4860%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (290 samples, 1.54%)</title><rect x="46.2360%" y="421" width="1.5417%" height="15" fill="rgb(249,21,11)" fg:x="8697" fg:w="290"/><text x="46.4860%" y="431.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (6,127 samples, 32.57%)</title><rect x="15.4545%" y="485" width="32.5731%" height="15" fill="rgb(222,201,40)" fg:x="2907" fg:w="6127"/><text x="15.7045%" y="495.50">nalgebra::base::blas_uninit::array_axcpy</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (568 samples, 3.02%)</title><rect x="45.0080%" y="469" width="3.0197%" height="15" fill="rgb(235,61,29)" fg:x="8466" fg:w="568"/><text x="45.2580%" y="479.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (568 samples, 3.02%)</title><rect x="45.0080%" y="453" width="3.0197%" height="15" fill="rgb(219,207,3)" fg:x="8466" fg:w="568"/><text x="45.2580%" y="463.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (47 samples, 0.25%)</title><rect x="47.7778%" y="437" width="0.2499%" height="15" fill="rgb(222,56,46)" fg:x="8987" fg:w="47"/><text x="48.0278%" y="447.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (6,373 samples, 33.88%)</title><rect x="14.7953%" y="533" width="33.8809%" height="15" fill="rgb(239,76,54)" fg:x="2783" fg:w="6373"/><text x="15.0453%" y="543.50">nalgebra::base::blas_uninit::gemm_uninit</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (6,373 samples, 33.88%)</title><rect x="14.7953%" y="517" width="33.8809%" height="15" fill="rgb(231,124,27)" fg:x="2783" fg:w="6373"/><text x="15.0453%" y="527.50">nalgebra::base::blas_uninit::gemv_uninit</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (6,314 samples, 33.57%)</title><rect x="15.1090%" y="501" width="33.5673%" height="15" fill="rgb(249,195,6)" fg:x="2842" fg:w="6314"/><text x="15.3590%" y="511.50">nalgebra::base::blas_uninit::axcpy_uninit</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (122 samples, 0.65%)</title><rect x="48.0276%" y="485" width="0.6486%" height="15" fill="rgb(237,174,47)" fg:x="9034" fg:w="122"/><text x="48.2776%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (2 samples, 0.01%)</title><rect x="48.8091%" y="437" width="0.0106%" height="15" fill="rgb(206,201,31)" fg:x="9181" fg:w="2"/><text x="49.0591%" y="447.50"></text></g><g><title>__rdl_alloc (6 samples, 0.03%)</title><rect x="48.8251%" y="421" width="0.0319%" height="15" fill="rgb(231,57,52)" fg:x="9184" fg:w="6"/><text x="49.0751%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.03%)</title><rect x="48.8251%" y="405" width="0.0319%" height="15" fill="rgb(248,177,22)" fg:x="9184" fg:w="6"/><text x="49.0751%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.28%)</title><rect x="48.8198%" y="437" width="0.2818%" height="15" fill="rgb(215,211,37)" fg:x="9183" fg:w="53"/><text x="49.0698%" y="447.50"></text></g><g><title>malloc (45 samples, 0.24%)</title><rect x="48.8623%" y="421" width="0.2392%" height="15" fill="rgb(241,128,51)" fg:x="9191" fg:w="45"/><text x="49.1123%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (56 samples, 0.30%)</title><rect x="48.8091%" y="453" width="0.2977%" height="15" fill="rgb(227,165,31)" fg:x="9181" fg:w="56"/><text x="49.0591%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.01%)</title><rect x="49.1069%" y="453" width="0.0106%" height="15" fill="rgb(228,167,24)" fg:x="9237" fg:w="2"/><text x="49.3569%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (59 samples, 0.31%)</title><rect x="48.8091%" y="485" width="0.3137%" height="15" fill="rgb(228,143,12)" fg:x="9181" fg:w="59"/><text x="49.0591%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (59 samples, 0.31%)</title><rect x="48.8091%" y="469" width="0.3137%" height="15" fill="rgb(249,149,8)" fg:x="9181" fg:w="59"/><text x="49.0591%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (61 samples, 0.32%)</title><rect x="48.8038%" y="501" width="0.3243%" height="15" fill="rgb(243,35,44)" fg:x="9180" fg:w="61"/><text x="49.0538%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (6 samples, 0.03%)</title><rect x="49.1281%" y="501" width="0.0319%" height="15" fill="rgb(246,89,9)" fg:x="9241" fg:w="6"/><text x="49.3781%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.03%)</title><rect x="49.1281%" y="485" width="0.0319%" height="15" fill="rgb(233,213,13)" fg:x="9241" fg:w="6"/><text x="49.3781%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.03%)</title><rect x="49.1281%" y="469" width="0.0319%" height="15" fill="rgb(233,141,41)" fg:x="9241" fg:w="6"/><text x="49.3781%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.03%)</title><rect x="49.1281%" y="453" width="0.0319%" height="15" fill="rgb(239,167,4)" fg:x="9241" fg:w="6"/><text x="49.3781%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.02%)</title><rect x="49.1388%" y="437" width="0.0213%" height="15" fill="rgb(209,217,16)" fg:x="9243" fg:w="4"/><text x="49.3888%" y="447.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::BufferUninit&gt;&gt;::uninit (93 samples, 0.49%)</title><rect x="48.6762%" y="533" width="0.4944%" height="15" fill="rgb(219,88,35)" fg:x="9156" fg:w="93"/><text x="48.9262%" y="543.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::allocate_uninit (93 samples, 0.49%)</title><rect x="48.6762%" y="517" width="0.4944%" height="15" fill="rgb(220,193,23)" fg:x="9156" fg:w="93"/><text x="48.9262%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="49.1600%" y="501" width="0.0106%" height="15" fill="rgb(230,90,52)" fg:x="9247" fg:w="2"/><text x="49.4100%" y="511.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (6,471 samples, 34.40%)</title><rect x="14.7953%" y="549" width="34.4019%" height="15" fill="rgb(252,106,19)" fg:x="2783" fg:w="6471"/><text x="15.0453%" y="559.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgeb..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::BufferUninit&gt;::assume_init (5 samples, 0.03%)</title><rect x="49.1707%" y="533" width="0.0266%" height="15" fill="rgb(206,74,20)" fg:x="9249" fg:w="5"/><text x="49.4207%" y="543.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::assume_init (5 samples, 0.03%)</title><rect x="49.1707%" y="517" width="0.0266%" height="15" fill="rgb(230,138,44)" fg:x="9249" fg:w="5"/><text x="49.4207%" y="527.50"></text></g><g><title>nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt;::new (4 samples, 0.02%)</title><rect x="49.1760%" y="501" width="0.0213%" height="15" fill="rgb(235,182,43)" fg:x="9250" fg:w="4"/><text x="49.4260%" y="511.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (6,563 samples, 34.89%)</title><rect x="14.3115%" y="565" width="34.8910%" height="15" fill="rgb(242,16,51)" fg:x="2692" fg:w="6563"/><text x="14.5615%" y="575.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebr..</text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.46%)</title><rect x="49.3355%" y="549" width="0.4625%" height="15" fill="rgb(248,9,4)" fg:x="9280" fg:w="87"/><text x="49.5855%" y="559.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new (2 samples, 0.01%)</title><rect x="49.7980%" y="549" width="0.0106%" height="15" fill="rgb(210,31,22)" fg:x="9367" fg:w="2"/><text x="50.0480%" y="559.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new_inclusive (2 samples, 0.01%)</title><rect x="49.7980%" y="533" width="0.0106%" height="15" fill="rgb(239,54,39)" fg:x="9367" fg:w="2"/><text x="50.0480%" y="543.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (11 samples, 0.06%)</title><rect x="49.8086%" y="549" width="0.0585%" height="15" fill="rgb(230,99,41)" fg:x="9369" fg:w="11"/><text x="50.0586%" y="559.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (11 samples, 0.06%)</title><rect x="49.8086%" y="533" width="0.0585%" height="15" fill="rgb(253,106,12)" fg:x="9369" fg:w="11"/><text x="50.0586%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="50.2711%" y="533" width="0.0159%" height="15" fill="rgb(213,46,41)" fg:x="9456" fg:w="3"/><text x="50.5211%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (93 samples, 0.49%)</title><rect x="49.8671%" y="549" width="0.4944%" height="15" fill="rgb(215,133,35)" fg:x="9380" fg:w="93"/><text x="50.1171%" y="559.50"></text></g><g><title>core::ptr::write (14 samples, 0.07%)</title><rect x="50.2871%" y="533" width="0.0744%" height="15" fill="rgb(213,28,5)" fg:x="9459" fg:w="14"/><text x="50.5371%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="50.3721%" y="501" width="0.0159%" height="15" fill="rgb(215,77,49)" fg:x="9475" fg:w="3"/><text x="50.6221%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="50.3721%" y="485" width="0.0159%" height="15" fill="rgb(248,100,22)" fg:x="9475" fg:w="3"/><text x="50.6221%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="50.3721%" y="469" width="0.0159%" height="15" fill="rgb(208,67,9)" fg:x="9475" fg:w="3"/><text x="50.6221%" y="479.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="50.3721%" y="453" width="0.0159%" height="15" fill="rgb(219,133,21)" fg:x="9475" fg:w="3"/><text x="50.6221%" y="463.50"></text></g><g><title>malloc (3 samples, 0.02%)</title><rect x="50.3721%" y="437" width="0.0159%" height="15" fill="rgb(246,46,29)" fg:x="9475" fg:w="3"/><text x="50.6221%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.03%)</title><rect x="50.3615%" y="549" width="0.0319%" height="15" fill="rgb(246,185,52)" fg:x="9473" fg:w="6"/><text x="50.6115%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.03%)</title><rect x="50.3615%" y="533" width="0.0319%" height="15" fill="rgb(252,136,11)" fg:x="9473" fg:w="6"/><text x="50.6115%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="50.3721%" y="517" width="0.0213%" height="15" fill="rgb(219,138,53)" fg:x="9475" fg:w="4"/><text x="50.6221%" y="527.50"></text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (231 samples, 1.23%)</title><rect x="49.2026%" y="565" width="1.2281%" height="15" fill="rgb(211,51,23)" fg:x="9255" fg:w="231"/><text x="49.4526%" y="575.50"></text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (7 samples, 0.04%)</title><rect x="50.3934%" y="549" width="0.0372%" height="15" fill="rgb(247,221,28)" fg:x="9479" fg:w="7"/><text x="50.6434%" y="559.50"></text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::take_shot (9,282 samples, 49.35%)</title><rect x="1.1005%" y="597" width="49.3461%" height="15" fill="rgb(251,222,45)" fg:x="207" fg:w="9282"/><text x="1.3505%" y="607.50">battleship::game::InternalPlayer&lt;T&gt;::take_shot</text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot (9,282 samples, 49.35%)</title><rect x="1.1005%" y="581" width="49.3461%" height="15" fill="rgb(217,162,53)" fg:x="207" fg:w="9282"/><text x="1.3505%" y="591.50">&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot</text></g><g><title>rand::rngs::thread::thread_rng (3 samples, 0.02%)</title><rect x="50.4306%" y="565" width="0.0159%" height="15" fill="rgb(229,93,14)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="50.4306%" y="549" width="0.0159%" height="15" fill="rgb(209,67,49)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="50.4306%" y="533" width="0.0159%" height="15" fill="rgb(213,87,29)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="543.50"></text></g><g><title>rand::rngs::thread::thread_rng::{{closure}} (3 samples, 0.02%)</title><rect x="50.4306%" y="517" width="0.0159%" height="15" fill="rgb(205,151,52)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="50.4306%" y="501" width="0.0159%" height="15" fill="rgb(253,215,39)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="511.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (3 samples, 0.02%)</title><rect x="50.4306%" y="485" width="0.0159%" height="15" fill="rgb(221,220,41)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="50.4306%" y="469" width="0.0159%" height="15" fill="rgb(218,133,21)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="50.4306%" y="453" width="0.0159%" height="15" fill="rgb(221,193,43)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="463.50"></text></g><g><title>core::mem::replace (3 samples, 0.02%)</title><rect x="50.4306%" y="437" width="0.0159%" height="15" fill="rgb(240,128,52)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="447.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="50.4306%" y="421" width="0.0159%" height="15" fill="rgb(253,114,12)" fg:x="9486" fg:w="3"/><text x="50.6806%" y="431.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (9,307 samples, 49.48%)</title><rect x="1.0260%" y="709" width="49.4790%" height="15" fill="rgb(215,223,47)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="719.50">rayon::iter::plumbing::Producer::fold_with</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (9,307 samples, 49.48%)</title><rect x="1.0260%" y="693" width="49.4790%" height="15" fill="rgb(248,225,23)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="703.50">&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (9,307 samples, 49.48%)</title><rect x="1.0260%" y="677" width="49.4790%" height="15" fill="rgb(250,108,0)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="687.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_ea..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (9,307 samples, 49.48%)</title><rect x="1.0260%" y="661" width="49.4790%" height="15" fill="rgb(228,208,7)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="671.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut</text></g><g><title>battleship::run_for::{{closure}} (9,307 samples, 49.48%)</title><rect x="1.0260%" y="645" width="49.4790%" height="15" fill="rgb(244,45,10)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="655.50">battleship::run_for::{{closure}}</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_for (9,307 samples, 49.48%)</title><rect x="1.0260%" y="629" width="49.4790%" height="15" fill="rgb(207,125,25)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="639.50">battleship::game::BattleshipGame&lt;A,B&gt;::run_for</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_game (9,307 samples, 49.48%)</title><rect x="1.0260%" y="613" width="49.4790%" height="15" fill="rgb(210,195,18)" fg:x="193" fg:w="9307"/><text x="1.2760%" y="623.50">battleship::game::BattleshipGame&lt;A,B&gt;::run_game</text></g><g><title>battleship::game::TargetBoard::check_hit (11 samples, 0.06%)</title><rect x="50.4466%" y="597" width="0.0585%" height="15" fill="rgb(249,80,12)" fg:x="9489" fg:w="11"/><text x="50.6966%" y="607.50"></text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::new_game (2 samples, 0.01%)</title><rect x="50.5104%" y="405" width="0.0106%" height="15" fill="rgb(221,65,9)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;battleship::ai_player::Action&gt;&gt; (2 samples, 0.01%)</title><rect x="50.5104%" y="389" width="0.0106%" height="15" fill="rgb(235,49,36)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;battleship::ai_player::Action&gt;&gt; (2 samples, 0.01%)</title><rect x="50.5104%" y="373" width="0.0106%" height="15" fill="rgb(225,32,20)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="50.5104%" y="357" width="0.0106%" height="15" fill="rgb(215,141,46)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="50.5104%" y="341" width="0.0106%" height="15" fill="rgb(250,160,47)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="50.5104%" y="325" width="0.0106%" height="15" fill="rgb(216,222,40)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="335.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="50.5104%" y="309" width="0.0106%" height="15" fill="rgb(234,217,39)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="50.5104%" y="293" width="0.0106%" height="15" fill="rgb(207,178,40)" fg:x="9501" fg:w="2"/><text x="50.7604%" y="303.50"></text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::reset (3 samples, 0.02%)</title><rect x="50.5104%" y="421" width="0.0159%" height="15" fill="rgb(221,136,13)" fg:x="9501" fg:w="3"/><text x="50.7604%" y="431.50"></text></g><g><title>&lt;nalgebra::base::array_storage::ArrayStorage&lt;T,_,_&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="50.5742%" y="373" width="0.0266%" height="15" fill="rgb(249,199,10)" fg:x="9513" fg:w="5"/><text x="50.8242%" y="383.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (5 samples, 0.03%)</title><rect x="50.5742%" y="357" width="0.0266%" height="15" fill="rgb(249,222,13)" fg:x="9513" fg:w="5"/><text x="50.8242%" y="367.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (5 samples, 0.03%)</title><rect x="50.5742%" y="341" width="0.0266%" height="15" fill="rgb(244,185,38)" fg:x="9513" fg:w="5"/><text x="50.8242%" y="351.50"></text></g><g><title>[libc.so.6] (5 samples, 0.03%)</title><rect x="50.5742%" y="325" width="0.0266%" height="15" fill="rgb(236,202,9)" fg:x="9513" fg:w="5"/><text x="50.8242%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.21%)</title><rect x="50.6273%" y="245" width="0.2127%" height="15" fill="rgb(250,229,37)" fg:x="9523" fg:w="40"/><text x="50.8773%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.21%)</title><rect x="50.6273%" y="229" width="0.2127%" height="15" fill="rgb(206,174,23)" fg:x="9523" fg:w="40"/><text x="50.8773%" y="239.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.21%)</title><rect x="50.6326%" y="213" width="0.2073%" height="15" fill="rgb(211,33,43)" fg:x="9524" fg:w="39"/><text x="50.8826%" y="223.50"></text></g><g><title>malloc (38 samples, 0.20%)</title><rect x="50.6380%" y="197" width="0.2020%" height="15" fill="rgb(245,58,50)" fg:x="9525" fg:w="38"/><text x="50.8880%" y="207.50"></text></g><g><title>[libc.so.6] (17 samples, 0.09%)</title><rect x="50.7496%" y="181" width="0.0904%" height="15" fill="rgb(244,68,36)" fg:x="9546" fg:w="17"/><text x="50.9996%" y="191.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="50.8240%" y="165" width="0.0159%" height="15" fill="rgb(232,229,15)" fg:x="9560" fg:w="3"/><text x="51.0740%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 0.22%)</title><rect x="50.6220%" y="293" width="0.2233%" height="15" fill="rgb(254,30,23)" fg:x="9522" fg:w="42"/><text x="50.8720%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 0.22%)</title><rect x="50.6220%" y="277" width="0.2233%" height="15" fill="rgb(235,160,14)" fg:x="9522" fg:w="42"/><text x="50.8720%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (41 samples, 0.22%)</title><rect x="50.6273%" y="261" width="0.2180%" height="15" fill="rgb(212,155,44)" fg:x="9523" fg:w="41"/><text x="50.8773%" y="271.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (1,104 samples, 5.87%)</title><rect x="50.5742%" y="389" width="5.8692%" height="15" fill="rgb(226,2,50)" fg:x="9513" fg:w="1104"/><text x="50.8242%" y="399.50">&lt;nalgeb..</text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (1,099 samples, 5.84%)</title><rect x="50.6007%" y="373" width="5.8426%" height="15" fill="rgb(234,177,6)" fg:x="9518" fg:w="1099"/><text x="50.8507%" y="383.50">&lt;nalgeb..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,098 samples, 5.84%)</title><rect x="50.6061%" y="357" width="5.8373%" height="15" fill="rgb(217,24,9)" fg:x="9519" fg:w="1098"/><text x="50.8561%" y="367.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,095 samples, 5.82%)</title><rect x="50.6220%" y="341" width="5.8214%" height="15" fill="rgb(220,13,46)" fg:x="9522" fg:w="1095"/><text x="50.8720%" y="351.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (1,095 samples, 5.82%)</title><rect x="50.6220%" y="325" width="5.8214%" height="15" fill="rgb(239,221,27)" fg:x="9522" fg:w="1095"/><text x="50.8720%" y="335.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,095 samples, 5.82%)</title><rect x="50.6220%" y="309" width="5.8214%" height="15" fill="rgb(222,198,25)" fg:x="9522" fg:w="1095"/><text x="50.8720%" y="319.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,053 samples, 5.60%)</title><rect x="50.8453%" y="293" width="5.5981%" height="15" fill="rgb(211,99,13)" fg:x="9564" fg:w="1053"/><text x="51.0953%" y="303.50">core::p..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,053 samples, 5.60%)</title><rect x="50.8453%" y="277" width="5.5981%" height="15" fill="rgb(232,111,31)" fg:x="9564" fg:w="1053"/><text x="51.0953%" y="287.50">core::i..</text></g><g><title>[libc.so.6] (1,053 samples, 5.60%)</title><rect x="50.8453%" y="261" width="5.5981%" height="15" fill="rgb(245,82,37)" fg:x="9564" fg:w="1053"/><text x="51.0953%" y="271.50">[libc.s..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (5 samples, 0.03%)</title><rect x="56.4434%" y="373" width="0.0266%" height="15" fill="rgb(227,149,46)" fg:x="10617" fg:w="5"/><text x="56.6934%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (3 samples, 0.02%)</title><rect x="56.4540%" y="357" width="0.0159%" height="15" fill="rgb(218,36,50)" fg:x="10619" fg:w="3"/><text x="56.7040%" y="367.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.02%)</title><rect x="56.4540%" y="341" width="0.0159%" height="15" fill="rgb(226,80,48)" fg:x="10619" fg:w="3"/><text x="56.7040%" y="351.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (3 samples, 0.02%)</title><rect x="56.4540%" y="325" width="0.0159%" height="15" fill="rgb(238,224,15)" fg:x="10619" fg:w="3"/><text x="56.7040%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.02%)</title><rect x="56.4540%" y="309" width="0.0159%" height="15" fill="rgb(241,136,10)" fg:x="10619" fg:w="3"/><text x="56.7040%" y="319.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.02%)</title><rect x="56.4540%" y="293" width="0.0159%" height="15" fill="rgb(208,32,45)" fg:x="10619" fg:w="3"/><text x="56.7040%" y="303.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (10 samples, 0.05%)</title><rect x="56.4700%" y="373" width="0.0532%" height="15" fill="rgb(207,135,9)" fg:x="10622" fg:w="10"/><text x="56.7200%" y="383.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (20 samples, 0.11%)</title><rect x="56.4434%" y="389" width="0.1063%" height="15" fill="rgb(206,86,44)" fg:x="10617" fg:w="20"/><text x="56.6934%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (5 samples, 0.03%)</title><rect x="56.5231%" y="373" width="0.0266%" height="15" fill="rgb(245,177,15)" fg:x="10632" fg:w="5"/><text x="56.7731%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (38 samples, 0.20%)</title><rect x="56.5497%" y="373" width="0.2020%" height="15" fill="rgb(206,64,50)" fg:x="10637" fg:w="38"/><text x="56.7997%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (38 samples, 0.20%)</title><rect x="56.5497%" y="357" width="0.2020%" height="15" fill="rgb(234,36,40)" fg:x="10637" fg:w="38"/><text x="56.7997%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (37 samples, 0.20%)</title><rect x="56.5550%" y="341" width="0.1967%" height="15" fill="rgb(213,64,8)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 0.20%)</title><rect x="56.5550%" y="325" width="0.1967%" height="15" fill="rgb(210,75,36)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 0.20%)</title><rect x="56.5550%" y="309" width="0.1967%" height="15" fill="rgb(229,88,21)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="319.50"></text></g><g><title>alloc::alloc::realloc (37 samples, 0.20%)</title><rect x="56.5550%" y="293" width="0.1967%" height="15" fill="rgb(252,204,47)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="303.50"></text></g><g><title>realloc (37 samples, 0.20%)</title><rect x="56.5550%" y="277" width="0.1967%" height="15" fill="rgb(208,77,27)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="287.50"></text></g><g><title>[libc.so.6] (37 samples, 0.20%)</title><rect x="56.5550%" y="261" width="0.1967%" height="15" fill="rgb(221,76,26)" fg:x="10638" fg:w="37"/><text x="56.8050%" y="271.50"></text></g><g><title>[libc.so.6] (36 samples, 0.19%)</title><rect x="56.5603%" y="245" width="0.1914%" height="15" fill="rgb(225,139,18)" fg:x="10639" fg:w="36"/><text x="56.8103%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (73 samples, 0.39%)</title><rect x="56.5497%" y="389" width="0.3881%" height="15" fill="rgb(230,137,11)" fg:x="10637" fg:w="73"/><text x="56.7997%" y="399.50"></text></g><g><title>core::ptr::write (35 samples, 0.19%)</title><rect x="56.7517%" y="373" width="0.1861%" height="15" fill="rgb(212,28,1)" fg:x="10675" fg:w="35"/><text x="57.0017%" y="383.50"></text></g><g><title>[libc.so.6] (32 samples, 0.17%)</title><rect x="56.7677%" y="357" width="0.1701%" height="15" fill="rgb(248,164,17)" fg:x="10678" fg:w="32"/><text x="57.0177%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rand::distributions::weighted_index::WeightedIndex&lt;u32&gt;&gt; (5 samples, 0.03%)</title><rect x="56.9431%" y="389" width="0.0266%" height="15" fill="rgb(222,171,42)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (5 samples, 0.03%)</title><rect x="56.9431%" y="373" width="0.0266%" height="15" fill="rgb(243,84,45)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (5 samples, 0.03%)</title><rect x="56.9431%" y="357" width="0.0266%" height="15" fill="rgb(252,49,23)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="56.9431%" y="341" width="0.0266%" height="15" fill="rgb(215,19,7)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="56.9431%" y="325" width="0.0266%" height="15" fill="rgb(238,81,41)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="56.9431%" y="309" width="0.0266%" height="15" fill="rgb(210,199,37)" fg:x="10711" fg:w="5"/><text x="57.1931%" y="319.50"></text></g><g><title>cfree (4 samples, 0.02%)</title><rect x="56.9484%" y="293" width="0.0213%" height="15" fill="rgb(244,192,49)" fg:x="10712" fg:w="4"/><text x="57.1984%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="56.9591%" y="277" width="0.0106%" height="15" fill="rgb(226,211,11)" fg:x="10714" fg:w="2"/><text x="57.2091%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.01%)</title><rect x="56.9697%" y="389" width="0.0106%" height="15" fill="rgb(236,162,54)" fg:x="10716" fg:w="2"/><text x="57.2197%" y="399.50"></text></g><g><title>nalgebra::base::componentwise::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::component_mul_assign (23 samples, 0.12%)</title><rect x="56.9803%" y="389" width="0.1223%" height="15" fill="rgb(220,229,9)" fg:x="10718" fg:w="23"/><text x="57.2303%" y="399.50"></text></g><g><title>&lt;u32 as core::ops::arith::MulAssign&gt;::mul_assign (23 samples, 0.12%)</title><rect x="56.9803%" y="373" width="0.1223%" height="15" fill="rgb(250,87,22)" fg:x="10718" fg:w="23"/><text x="57.2303%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="57.1026%" y="373" width="0.0266%" height="15" fill="rgb(239,43,17)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="57.1026%" y="357" width="0.0266%" height="15" fill="rgb(231,177,25)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (5 samples, 0.03%)</title><rect x="57.1026%" y="341" width="0.0266%" height="15" fill="rgb(219,179,1)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (5 samples, 0.03%)</title><rect x="57.1026%" y="325" width="0.0266%" height="15" fill="rgb(238,219,53)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="57.1026%" y="309" width="0.0266%" height="15" fill="rgb(232,167,36)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="57.1026%" y="293" width="0.0266%" height="15" fill="rgb(244,19,51)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="57.1026%" y="277" width="0.0266%" height="15" fill="rgb(224,6,22)" fg:x="10741" fg:w="5"/><text x="57.3526%" y="287.50"></text></g><g><title>cfree (4 samples, 0.02%)</title><rect x="57.1079%" y="261" width="0.0213%" height="15" fill="rgb(224,145,5)" fg:x="10742" fg:w="4"/><text x="57.3579%" y="271.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="57.1132%" y="245" width="0.0159%" height="15" fill="rgb(234,130,49)" fg:x="10743" fg:w="3"/><text x="57.3632%" y="255.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (6 samples, 0.03%)</title><rect x="57.1558%" y="341" width="0.0319%" height="15" fill="rgb(254,6,2)" fg:x="10751" fg:w="6"/><text x="57.4058%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (18 samples, 0.10%)</title><rect x="57.1026%" y="389" width="0.0957%" height="15" fill="rgb(208,96,46)" fg:x="10741" fg:w="18"/><text x="57.3526%" y="399.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (13 samples, 0.07%)</title><rect x="57.1292%" y="373" width="0.0691%" height="15" fill="rgb(239,3,39)" fg:x="10746" fg:w="13"/><text x="57.3792%" y="383.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (13 samples, 0.07%)</title><rect x="57.1292%" y="357" width="0.0691%" height="15" fill="rgb(233,210,1)" fg:x="10746" fg:w="13"/><text x="57.3792%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.01%)</title><rect x="57.1877%" y="341" width="0.0106%" height="15" fill="rgb(244,137,37)" fg:x="10757" fg:w="2"/><text x="57.4377%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="57.1877%" y="325" width="0.0106%" height="15" fill="rgb(240,136,2)" fg:x="10757" fg:w="2"/><text x="57.4377%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;&gt; (25 samples, 0.13%)</title><rect x="57.2036%" y="373" width="0.1329%" height="15" fill="rgb(239,18,37)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; (25 samples, 0.13%)</title><rect x="57.2036%" y="357" width="0.1329%" height="15" fill="rgb(218,185,22)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (25 samples, 0.13%)</title><rect x="57.2036%" y="341" width="0.1329%" height="15" fill="rgb(225,218,4)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (25 samples, 0.13%)</title><rect x="57.2036%" y="325" width="0.1329%" height="15" fill="rgb(230,182,32)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.13%)</title><rect x="57.2036%" y="309" width="0.1329%" height="15" fill="rgb(242,56,43)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.13%)</title><rect x="57.2036%" y="293" width="0.1329%" height="15" fill="rgb(233,99,24)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.13%)</title><rect x="57.2036%" y="277" width="0.1329%" height="15" fill="rgb(234,209,42)" fg:x="10760" fg:w="25"/><text x="57.4536%" y="287.50"></text></g><g><title>cfree (24 samples, 0.13%)</title><rect x="57.2089%" y="261" width="0.1276%" height="15" fill="rgb(227,7,12)" fg:x="10761" fg:w="24"/><text x="57.4589%" y="271.50"></text></g><g><title>[libc.so.6] (16 samples, 0.09%)</title><rect x="57.2515%" y="245" width="0.0851%" height="15" fill="rgb(245,203,43)" fg:x="10769" fg:w="16"/><text x="57.5015%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="57.3259%" y="229" width="0.0106%" height="15" fill="rgb(238,205,33)" fg:x="10783" fg:w="2"/><text x="57.5759%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (35 samples, 0.19%)</title><rect x="57.3365%" y="325" width="0.1861%" height="15" fill="rgb(231,56,7)" fg:x="10785" fg:w="35"/><text x="57.5865%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (35 samples, 0.19%)</title><rect x="57.3365%" y="309" width="0.1861%" height="15" fill="rgb(244,186,29)" fg:x="10785" fg:w="35"/><text x="57.5865%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.02%)</title><rect x="57.5013%" y="293" width="0.0213%" height="15" fill="rgb(234,111,31)" fg:x="10816" fg:w="4"/><text x="57.7513%" y="303.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (3 samples, 0.02%)</title><rect x="57.5332%" y="293" width="0.0159%" height="15" fill="rgb(241,149,10)" fg:x="10822" fg:w="3"/><text x="57.7832%" y="303.50"></text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (10 samples, 0.05%)</title><rect x="57.5492%" y="293" width="0.0532%" height="15" fill="rgb(249,206,44)" fg:x="10825" fg:w="10"/><text x="57.7992%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.02%)</title><rect x="57.6023%" y="277" width="0.0159%" height="15" fill="rgb(251,153,30)" fg:x="10835" fg:w="3"/><text x="57.8523%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="57.6077%" y="261" width="0.0106%" height="15" fill="rgb(239,152,38)" fg:x="10836" fg:w="2"/><text x="57.8577%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.01%)</title><rect x="57.6077%" y="245" width="0.0106%" height="15" fill="rgb(249,139,47)" fg:x="10836" fg:w="2"/><text x="57.8577%" y="255.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axc (19 samples, 0.10%)</title><rect x="57.5226%" y="309" width="0.1010%" height="15" fill="rgb(244,64,35)" fg:x="10820" fg:w="19"/><text x="57.7726%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.02%)</title><rect x="57.6023%" y="293" width="0.0213%" height="15" fill="rgb(216,46,15)" fg:x="10835" fg:w="4"/><text x="57.8523%" y="303.50"></text></g><g><title>&lt;u32 as core::ops::arith::Add&gt;::add (837 samples, 4.45%)</title><rect x="60.9729%" y="293" width="4.4498%" height="15" fill="rgb(250,74,19)" fg:x="11469" fg:w="837"/><text x="61.2229%" y="303.50">&lt;u32 ..</text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (1,354 samples, 7.20%)</title><rect x="65.4226%" y="293" width="7.1983%" height="15" fill="rgb(249,42,33)" fg:x="12306" fg:w="1354"/><text x="65.6726%" y="303.50">&lt;u32 as co..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (122 samples, 0.65%)</title><rect x="73.1898%" y="261" width="0.6486%" height="15" fill="rgb(242,149,17)" fg:x="13767" fg:w="122"/><text x="73.4398%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (122 samples, 0.65%)</title><rect x="73.1898%" y="245" width="0.6486%" height="15" fill="rgb(244,29,21)" fg:x="13767" fg:w="122"/><text x="73.4398%" y="255.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (3,079 samples, 16.37%)</title><rect x="57.6236%" y="309" width="16.3690%" height="15" fill="rgb(220,130,37)" fg:x="10839" fg:w="3079"/><text x="57.8736%" y="319.50">nalgebra::base::blas_unin..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (258 samples, 1.37%)</title><rect x="72.6209%" y="293" width="1.3716%" height="15" fill="rgb(211,67,2)" fg:x="13660" fg:w="258"/><text x="72.8709%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (258 samples, 1.37%)</title><rect x="72.6209%" y="277" width="1.3716%" height="15" fill="rgb(235,68,52)" fg:x="13660" fg:w="258"/><text x="72.8709%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (29 samples, 0.15%)</title><rect x="73.8384%" y="261" width="0.1542%" height="15" fill="rgb(246,142,3)" fg:x="13889" fg:w="29"/><text x="74.0884%" y="271.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (3,202 samples, 17.02%)</title><rect x="57.3365%" y="357" width="17.0229%" height="15" fill="rgb(241,25,7)" fg:x="10785" fg:w="3202"/><text x="57.5865%" y="367.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (3,202 samples, 17.02%)</title><rect x="57.3365%" y="341" width="17.0229%" height="15" fill="rgb(242,119,39)" fg:x="10785" fg:w="3202"/><text x="57.5865%" y="351.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (3,167 samples, 16.84%)</title><rect x="57.5226%" y="325" width="16.8368%" height="15" fill="rgb(241,98,45)" fg:x="10820" fg:w="3167"/><text x="57.7726%" y="335.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (69 samples, 0.37%)</title><rect x="73.9926%" y="309" width="0.3668%" height="15" fill="rgb(254,28,30)" fg:x="13918" fg:w="69"/><text x="74.2426%" y="319.50"></text></g><g><title>__rdl_alloc (4 samples, 0.02%)</title><rect x="74.4391%" y="245" width="0.0213%" height="15" fill="rgb(241,142,54)" fg:x="14002" fg:w="4"/><text x="74.6891%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.02%)</title><rect x="74.4391%" y="229" width="0.0213%" height="15" fill="rgb(222,85,15)" fg:x="14002" fg:w="4"/><text x="74.6891%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (22 samples, 0.12%)</title><rect x="74.4338%" y="325" width="0.1170%" height="15" fill="rgb(210,85,47)" fg:x="14001" fg:w="22"/><text x="74.6838%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (22 samples, 0.12%)</title><rect x="74.4338%" y="309" width="0.1170%" height="15" fill="rgb(224,206,25)" fg:x="14001" fg:w="22"/><text x="74.6838%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (22 samples, 0.12%)</title><rect x="74.4338%" y="293" width="0.1170%" height="15" fill="rgb(243,201,19)" fg:x="14001" fg:w="22"/><text x="74.6838%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (22 samples, 0.12%)</title><rect x="74.4338%" y="277" width="0.1170%" height="15" fill="rgb(236,59,4)" fg:x="14001" fg:w="22"/><text x="74.6838%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.11%)</title><rect x="74.4391%" y="261" width="0.1116%" height="15" fill="rgb(254,179,45)" fg:x="14002" fg:w="21"/><text x="74.6891%" y="271.50"></text></g><g><title>malloc (17 samples, 0.09%)</title><rect x="74.4604%" y="245" width="0.0904%" height="15" fill="rgb(226,14,10)" fg:x="14006" fg:w="17"/><text x="74.7104%" y="255.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::BufferUninit&gt;&gt;::uninit (37 samples, 0.20%)</title><rect x="74.3594%" y="357" width="0.1967%" height="15" fill="rgb(244,27,41)" fg:x="13987" fg:w="37"/><text x="74.6094%" y="367.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::allocate_uninit (37 samples, 0.20%)</title><rect x="74.3594%" y="341" width="0.1967%" height="15" fill="rgb(235,35,32)" fg:x="13987" fg:w="37"/><text x="74.6094%" y="351.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,268 samples, 17.37%)</title><rect x="57.1983%" y="389" width="17.3737%" height="15" fill="rgb(218,68,31)" fg:x="10759" fg:w="3268"/><text x="57.4483%" y="399.50">nalgebra::base::ops::&lt;impl ..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,242 samples, 17.24%)</title><rect x="57.3365%" y="373" width="17.2355%" height="15" fill="rgb(207,120,37)" fg:x="10785" fg:w="3242"/><text x="57.5865%" y="383.50">nalgebra::base::ops::&lt;impl ..</text></g><g><title>nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::BufferUninit&gt;::assume_init (3 samples, 0.02%)</title><rect x="74.5561%" y="357" width="0.0159%" height="15" fill="rgb(227,98,0)" fg:x="14024" fg:w="3"/><text x="74.8061%" y="367.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::assume_init (3 samples, 0.02%)</title><rect x="74.5561%" y="341" width="0.0159%" height="15" fill="rgb(207,7,3)" fg:x="14024" fg:w="3"/><text x="74.8061%" y="351.50"></text></g><g><title>nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt;::new (2 samples, 0.01%)</title><rect x="74.5614%" y="325" width="0.0106%" height="15" fill="rgb(206,98,19)" fg:x="14025" fg:w="2"/><text x="74.8114%" y="335.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.28%)</title><rect x="74.6624%" y="373" width="0.2764%" height="15" fill="rgb(217,5,26)" fg:x="14044" fg:w="52"/><text x="74.9124%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new (2 samples, 0.01%)</title><rect x="74.9389%" y="373" width="0.0106%" height="15" fill="rgb(235,190,38)" fg:x="14096" fg:w="2"/><text x="75.1889%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new_inclusive (2 samples, 0.01%)</title><rect x="74.9389%" y="357" width="0.0106%" height="15" fill="rgb(247,86,24)" fg:x="14096" fg:w="2"/><text x="75.1889%" y="367.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (7 samples, 0.04%)</title><rect x="74.9495%" y="373" width="0.0372%" height="15" fill="rgb(205,101,16)" fg:x="14098" fg:w="7"/><text x="75.1995%" y="383.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (7 samples, 0.04%)</title><rect x="74.9495%" y="357" width="0.0372%" height="15" fill="rgb(246,168,33)" fg:x="14098" fg:w="7"/><text x="75.1995%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.01%)</title><rect x="75.1515%" y="357" width="0.0106%" height="15" fill="rgb(231,114,1)" fg:x="14136" fg:w="2"/><text x="75.4015%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39 samples, 0.21%)</title><rect x="74.9867%" y="373" width="0.2073%" height="15" fill="rgb(207,184,53)" fg:x="14105" fg:w="39"/><text x="75.2367%" y="383.50"></text></g><g><title>core::ptr::write (6 samples, 0.03%)</title><rect x="75.1621%" y="357" width="0.0319%" height="15" fill="rgb(224,95,51)" fg:x="14138" fg:w="6"/><text x="75.4121%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="75.1994%" y="325" width="0.0106%" height="15" fill="rgb(212,188,45)" fg:x="14145" fg:w="2"/><text x="75.4494%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="75.1994%" y="309" width="0.0106%" height="15" fill="rgb(223,154,38)" fg:x="14145" fg:w="2"/><text x="75.4494%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="75.1994%" y="293" width="0.0106%" height="15" fill="rgb(251,22,52)" fg:x="14145" fg:w="2"/><text x="75.4494%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.02%)</title><rect x="75.1940%" y="373" width="0.0213%" height="15" fill="rgb(229,209,22)" fg:x="14144" fg:w="4"/><text x="75.4440%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="75.1940%" y="357" width="0.0213%" height="15" fill="rgb(234,138,34)" fg:x="14144" fg:w="4"/><text x="75.4440%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="75.1994%" y="341" width="0.0159%" height="15" fill="rgb(212,95,11)" fg:x="14145" fg:w="3"/><text x="75.4494%" y="351.50"></text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::take_shot (4,645 samples, 24.69%)</title><rect x="50.5263%" y="421" width="24.6943%" height="15" fill="rgb(240,179,47)" fg:x="9504" fg:w="4645"/><text x="50.7763%" y="431.50">battleship::game::InternalPlayer&lt;T&gt;::ta..</text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot (4,644 samples, 24.69%)</title><rect x="50.5316%" y="405" width="24.6890%" height="15" fill="rgb(240,163,11)" fg:x="9505" fg:w="4644"/><text x="50.7816%" y="415.50">&lt;battleship::ai_player::AIPlayer as bat..</text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (122 samples, 0.65%)</title><rect x="74.5720%" y="389" width="0.6486%" height="15" fill="rgb(236,37,12)" fg:x="14027" fg:w="122"/><text x="74.8220%" y="399.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (13,957 samples, 74.20%)</title><rect x="1.0260%" y="757" width="74.1999%" height="15" fill="rgb(232,164,16)" fg:x="193" fg:w="13957"/><text x="1.2760%" y="767.50">rayon_core::join::join_context::call_b::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (13,957 samples, 74.20%)</title><rect x="1.0260%" y="741" width="74.1999%" height="15" fill="rgb(244,205,15)" fg:x="193" fg:w="13957"/><text x="1.2760%" y="751.50">rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (13,957 samples, 74.20%)</title><rect x="1.0260%" y="725" width="74.1999%" height="15" fill="rgb(223,117,47)" fg:x="193" fg:w="13957"/><text x="1.2760%" y="735.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context (4,650 samples, 24.72%)</title><rect x="50.5051%" y="709" width="24.7209%" height="15" fill="rgb(244,107,35)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="719.50">rayon_core::join::join_context</text></g><g><title>rayon_core::registry::in_worker (4,650 samples, 24.72%)</title><rect x="50.5051%" y="693" width="24.7209%" height="15" fill="rgb(205,140,8)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="703.50">rayon_core::registry::in_worker</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,650 samples, 24.72%)</title><rect x="50.5051%" y="677" width="24.7209%" height="15" fill="rgb(228,84,46)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="687.50">rayon_core::join::join_context::{{closu..</text></g><g><title>rayon_core::unwind::halt_unwinding (4,650 samples, 24.72%)</title><rect x="50.5051%" y="661" width="24.7209%" height="15" fill="rgb(254,188,9)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="671.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (4,650 samples, 24.72%)</title><rect x="50.5051%" y="645" width="24.7209%" height="15" fill="rgb(206,112,54)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,650 samples, 24.72%)</title><rect x="50.5051%" y="629" width="24.7209%" height="15" fill="rgb(216,84,49)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,650 samples, 24.72%)</title><rect x="50.5051%" y="613" width="24.7209%" height="15" fill="rgb(214,194,35)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="623.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,650 samples, 24.72%)</title><rect x="50.5051%" y="597" width="24.7209%" height="15" fill="rgb(249,28,3)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="607.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (4,650 samples, 24.72%)</title><rect x="50.5051%" y="581" width="24.7209%" height="15" fill="rgb(222,56,52)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="591.50">rayon_core::join::join_context::call_a:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (4,650 samples, 24.72%)</title><rect x="50.5051%" y="565" width="24.7209%" height="15" fill="rgb(245,217,50)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="575.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,650 samples, 24.72%)</title><rect x="50.5051%" y="549" width="24.7209%" height="15" fill="rgb(213,201,24)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="559.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (4,650 samples, 24.72%)</title><rect x="50.5051%" y="533" width="24.7209%" height="15" fill="rgb(248,116,28)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="543.50">rayon::iter::plumbing::Producer::fold_w..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (4,650 samples, 24.72%)</title><rect x="50.5051%" y="517" width="24.7209%" height="15" fill="rgb(219,72,43)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="527.50">&lt;rayon::iter::for_each::ForEachConsumer..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4,650 samples, 24.72%)</title><rect x="50.5051%" y="501" width="24.7209%" height="15" fill="rgb(209,138,14)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="511.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4,650 samples, 24.72%)</title><rect x="50.5051%" y="485" width="24.7209%" height="15" fill="rgb(222,18,33)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="495.50">core::ops::function::impls::&lt;impl core:..</text></g><g><title>battleship::run_for::{{closure}} (4,650 samples, 24.72%)</title><rect x="50.5051%" y="469" width="24.7209%" height="15" fill="rgb(213,199,7)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="479.50">battleship::run_for::{{closure}}</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_for (4,650 samples, 24.72%)</title><rect x="50.5051%" y="453" width="24.7209%" height="15" fill="rgb(250,110,10)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="463.50">battleship::game::BattleshipGame&lt;A,B&gt;::..</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_game (4,650 samples, 24.72%)</title><rect x="50.5051%" y="437" width="24.7209%" height="15" fill="rgb(248,123,6)" fg:x="9500" fg:w="4650"/><text x="50.7551%" y="447.50">battleship::game::BattleshipGame&lt;A,B&gt;::..</text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::reset (2 samples, 0.01%)</title><rect x="75.2419%" y="309" width="0.0106%" height="15" fill="rgb(206,91,31)" fg:x="14153" fg:w="2"/><text x="75.4919%" y="319.50"></text></g><g><title>&lt;nalgebra::base::array_storage::ArrayStorage&lt;T,_,_&gt; as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="75.2632%" y="261" width="0.0372%" height="15" fill="rgb(211,154,13)" fg:x="14157" fg:w="7"/><text x="75.5132%" y="271.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (7 samples, 0.04%)</title><rect x="75.2632%" y="245" width="0.0372%" height="15" fill="rgb(225,148,7)" fg:x="14157" fg:w="7"/><text x="75.5132%" y="255.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (7 samples, 0.04%)</title><rect x="75.2632%" y="229" width="0.0372%" height="15" fill="rgb(220,160,43)" fg:x="14157" fg:w="7"/><text x="75.5132%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.04%)</title><rect x="75.2632%" y="213" width="0.0372%" height="15" fill="rgb(213,52,39)" fg:x="14157" fg:w="7"/><text x="75.5132%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.19%)</title><rect x="75.3110%" y="133" width="0.1914%" height="15" fill="rgb(243,137,7)" fg:x="14166" fg:w="36"/><text x="75.5610%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.19%)</title><rect x="75.3110%" y="117" width="0.1914%" height="15" fill="rgb(230,79,13)" fg:x="14166" fg:w="36"/><text x="75.5610%" y="127.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.19%)</title><rect x="75.3110%" y="101" width="0.1914%" height="15" fill="rgb(247,105,23)" fg:x="14166" fg:w="36"/><text x="75.5610%" y="111.50"></text></g><g><title>malloc (36 samples, 0.19%)</title><rect x="75.3110%" y="85" width="0.1914%" height="15" fill="rgb(223,179,41)" fg:x="14166" fg:w="36"/><text x="75.5610%" y="95.50"></text></g><g><title>[libc.so.6] (18 samples, 0.10%)</title><rect x="75.4067%" y="69" width="0.0957%" height="15" fill="rgb(218,9,34)" fg:x="14184" fg:w="18"/><text x="75.6567%" y="79.50"></text></g><g><title>[libc.so.6] (9 samples, 0.05%)</title><rect x="75.4545%" y="53" width="0.0478%" height="15" fill="rgb(222,106,8)" fg:x="14193" fg:w="9"/><text x="75.7045%" y="63.50"></text></g><g><title>__mprotect (5 samples, 0.03%)</title><rect x="75.4758%" y="37" width="0.0266%" height="15" fill="rgb(211,220,0)" fg:x="14197" fg:w="5"/><text x="75.7258%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.20%)</title><rect x="75.3057%" y="181" width="0.2020%" height="15" fill="rgb(229,52,16)" fg:x="14165" fg:w="38"/><text x="75.5557%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.20%)</title><rect x="75.3057%" y="165" width="0.2020%" height="15" fill="rgb(212,155,18)" fg:x="14165" fg:w="38"/><text x="75.5557%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.20%)</title><rect x="75.3110%" y="149" width="0.1967%" height="15" fill="rgb(242,21,14)" fg:x="14166" fg:w="37"/><text x="75.5610%" y="159.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (1,106 samples, 5.88%)</title><rect x="75.2578%" y="277" width="5.8799%" height="15" fill="rgb(222,19,48)" fg:x="14156" fg:w="1106"/><text x="75.5078%" y="287.50">&lt;nalgeb..</text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (1,098 samples, 5.84%)</title><rect x="75.3004%" y="261" width="5.8373%" height="15" fill="rgb(232,45,27)" fg:x="14164" fg:w="1098"/><text x="75.5504%" y="271.50">&lt;nalgeb..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,098 samples, 5.84%)</title><rect x="75.3004%" y="245" width="5.8373%" height="15" fill="rgb(249,103,42)" fg:x="14164" fg:w="1098"/><text x="75.5504%" y="255.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,097 samples, 5.83%)</title><rect x="75.3057%" y="229" width="5.8320%" height="15" fill="rgb(246,81,33)" fg:x="14165" fg:w="1097"/><text x="75.5557%" y="239.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (1,097 samples, 5.83%)</title><rect x="75.3057%" y="213" width="5.8320%" height="15" fill="rgb(252,33,42)" fg:x="14165" fg:w="1097"/><text x="75.5557%" y="223.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,097 samples, 5.83%)</title><rect x="75.3057%" y="197" width="5.8320%" height="15" fill="rgb(209,212,41)" fg:x="14165" fg:w="1097"/><text x="75.5557%" y="207.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,059 samples, 5.63%)</title><rect x="75.5077%" y="181" width="5.6300%" height="15" fill="rgb(207,154,6)" fg:x="14203" fg:w="1059"/><text x="75.7577%" y="191.50">core::p..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,059 samples, 5.63%)</title><rect x="75.5077%" y="165" width="5.6300%" height="15" fill="rgb(223,64,47)" fg:x="14203" fg:w="1059"/><text x="75.7577%" y="175.50">core::i..</text></g><g><title>[libc.so.6] (1,059 samples, 5.63%)</title><rect x="75.5077%" y="149" width="5.6300%" height="15" fill="rgb(211,161,38)" fg:x="14203" fg:w="1059"/><text x="75.7577%" y="159.50">[libc.s..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (2 samples, 0.01%)</title><rect x="81.1377%" y="261" width="0.0106%" height="15" fill="rgb(219,138,40)" fg:x="15262" fg:w="2"/><text x="81.3877%" y="271.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (15 samples, 0.08%)</title><rect x="81.1483%" y="261" width="0.0797%" height="15" fill="rgb(241,228,46)" fg:x="15264" fg:w="15"/><text x="81.3983%" y="271.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample (25 samples, 0.13%)</title><rect x="81.1377%" y="277" width="0.1329%" height="15" fill="rgb(223,209,38)" fg:x="15262" fg:w="25"/><text x="81.3877%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (8 samples, 0.04%)</title><rect x="81.2281%" y="261" width="0.0425%" height="15" fill="rgb(236,164,45)" fg:x="15279" fg:w="8"/><text x="81.4781%" y="271.50"></text></g><g><title>&lt;rand::distributions::weighted_index::WeightedIndex&lt;X&gt; as rand::distributions::distribution::Distribution&lt;usize&gt;&gt;::sample::{{closure}} (2 samples, 0.01%)</title><rect x="81.2600%" y="245" width="0.0106%" height="15" fill="rgb(231,15,5)" fg:x="15285" fg:w="2"/><text x="81.5100%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::le (2 samples, 0.01%)</title><rect x="81.2600%" y="229" width="0.0106%" height="15" fill="rgb(252,35,15)" fg:x="15285" fg:w="2"/><text x="81.5100%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.16%)</title><rect x="81.2759%" y="261" width="0.1648%" height="15" fill="rgb(248,181,18)" fg:x="15288" fg:w="31"/><text x="81.5259%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (31 samples, 0.16%)</title><rect x="81.2759%" y="245" width="0.1648%" height="15" fill="rgb(233,39,42)" fg:x="15288" fg:w="31"/><text x="81.5259%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.16%)</title><rect x="81.2759%" y="229" width="0.1648%" height="15" fill="rgb(238,110,33)" fg:x="15288" fg:w="31"/><text x="81.5259%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (31 samples, 0.16%)</title><rect x="81.2759%" y="213" width="0.1648%" height="15" fill="rgb(233,195,10)" fg:x="15288" fg:w="31"/><text x="81.5259%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (31 samples, 0.16%)</title><rect x="81.2759%" y="197" width="0.1648%" height="15" fill="rgb(254,105,3)" fg:x="15288" fg:w="31"/><text x="81.5259%" y="207.50"></text></g><g><title>alloc::alloc::realloc (30 samples, 0.16%)</title><rect x="81.2812%" y="181" width="0.1595%" height="15" fill="rgb(221,225,9)" fg:x="15289" fg:w="30"/><text x="81.5312%" y="191.50"></text></g><g><title>realloc (29 samples, 0.15%)</title><rect x="81.2865%" y="165" width="0.1542%" height="15" fill="rgb(224,227,45)" fg:x="15290" fg:w="29"/><text x="81.5365%" y="175.50"></text></g><g><title>[libc.so.6] (29 samples, 0.15%)</title><rect x="81.2865%" y="149" width="0.1542%" height="15" fill="rgb(229,198,43)" fg:x="15290" fg:w="29"/><text x="81.5365%" y="159.50"></text></g><g><title>[libc.so.6] (29 samples, 0.15%)</title><rect x="81.2865%" y="133" width="0.1542%" height="15" fill="rgb(206,209,35)" fg:x="15290" fg:w="29"/><text x="81.5365%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="81.4301%" y="117" width="0.0106%" height="15" fill="rgb(245,195,53)" fg:x="15317" fg:w="2"/><text x="81.6801%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (71 samples, 0.38%)</title><rect x="81.2706%" y="277" width="0.3775%" height="15" fill="rgb(240,92,26)" fg:x="15287" fg:w="71"/><text x="81.5206%" y="287.50"></text></g><g><title>core::ptr::write (39 samples, 0.21%)</title><rect x="81.4407%" y="261" width="0.2073%" height="15" fill="rgb(207,40,23)" fg:x="15319" fg:w="39"/><text x="81.6907%" y="271.50"></text></g><g><title>[libc.so.6] (39 samples, 0.21%)</title><rect x="81.4407%" y="245" width="0.2073%" height="15" fill="rgb(223,111,35)" fg:x="15319" fg:w="39"/><text x="81.6907%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.02%)</title><rect x="81.6534%" y="277" width="0.0213%" height="15" fill="rgb(229,147,28)" fg:x="15359" fg:w="4"/><text x="81.9034%" y="287.50"></text></g><g><title>nalgebra::base::componentwise::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::component_mul_assign (22 samples, 0.12%)</title><rect x="81.6746%" y="277" width="0.1170%" height="15" fill="rgb(211,29,28)" fg:x="15363" fg:w="22"/><text x="81.9246%" y="287.50"></text></g><g><title>&lt;u32 as core::ops::arith::MulAssign&gt;::mul_assign (22 samples, 0.12%)</title><rect x="81.6746%" y="261" width="0.1170%" height="15" fill="rgb(228,72,33)" fg:x="15363" fg:w="22"/><text x="81.9246%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.05%)</title><rect x="81.7916%" y="181" width="0.0532%" height="15" fill="rgb(205,214,31)" fg:x="15385" fg:w="10"/><text x="82.0416%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.05%)</title><rect x="81.7916%" y="165" width="0.0532%" height="15" fill="rgb(224,111,15)" fg:x="15385" fg:w="10"/><text x="82.0416%" y="175.50"></text></g><g><title>cfree (10 samples, 0.05%)</title><rect x="81.7916%" y="149" width="0.0532%" height="15" fill="rgb(253,21,26)" fg:x="15385" fg:w="10"/><text x="82.0416%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.02%)</title><rect x="81.8235%" y="133" width="0.0213%" height="15" fill="rgb(245,139,43)" fg:x="15391" fg:w="4"/><text x="82.0735%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (11 samples, 0.06%)</title><rect x="81.7916%" y="261" width="0.0585%" height="15" fill="rgb(252,170,7)" fg:x="15385" fg:w="11"/><text x="82.0416%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (11 samples, 0.06%)</title><rect x="81.7916%" y="245" width="0.0585%" height="15" fill="rgb(231,118,14)" fg:x="15385" fg:w="11"/><text x="82.0416%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (11 samples, 0.06%)</title><rect x="81.7916%" y="229" width="0.0585%" height="15" fill="rgb(238,83,0)" fg:x="15385" fg:w="11"/><text x="82.0416%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (11 samples, 0.06%)</title><rect x="81.7916%" y="213" width="0.0585%" height="15" fill="rgb(221,39,39)" fg:x="15385" fg:w="11"/><text x="82.0416%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.06%)</title><rect x="81.7916%" y="197" width="0.0585%" height="15" fill="rgb(222,119,46)" fg:x="15385" fg:w="11"/><text x="82.0416%" y="207.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.02%)</title><rect x="81.8820%" y="229" width="0.0213%" height="15" fill="rgb(222,165,49)" fg:x="15402" fg:w="4"/><text x="82.1320%" y="239.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (25 samples, 0.13%)</title><rect x="81.7916%" y="277" width="0.1329%" height="15" fill="rgb(219,113,52)" fg:x="15385" fg:w="25"/><text x="82.0416%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (14 samples, 0.07%)</title><rect x="81.8501%" y="261" width="0.0744%" height="15" fill="rgb(214,7,15)" fg:x="15396" fg:w="14"/><text x="82.1001%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (14 samples, 0.07%)</title><rect x="81.8501%" y="245" width="0.0744%" height="15" fill="rgb(235,32,4)" fg:x="15396" fg:w="14"/><text x="82.1001%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.02%)</title><rect x="81.9032%" y="229" width="0.0213%" height="15" fill="rgb(238,90,54)" fg:x="15406" fg:w="4"/><text x="82.1532%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.02%)</title><rect x="81.9032%" y="213" width="0.0213%" height="15" fill="rgb(213,208,19)" fg:x="15406" fg:w="4"/><text x="82.1532%" y="223.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.02%)</title><rect x="81.9086%" y="197" width="0.0159%" height="15" fill="rgb(233,156,4)" fg:x="15407" fg:w="3"/><text x="82.1586%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3 samples, 0.02%)</title><rect x="81.9086%" y="181" width="0.0159%" height="15" fill="rgb(207,194,5)" fg:x="15407" fg:w="3"/><text x="82.1586%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;&gt; (27 samples, 0.14%)</title><rect x="81.9351%" y="261" width="0.1435%" height="15" fill="rgb(206,111,30)" fg:x="15412" fg:w="27"/><text x="82.1851%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;u32,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; (27 samples, 0.14%)</title><rect x="81.9351%" y="245" width="0.1435%" height="15" fill="rgb(243,70,54)" fg:x="15412" fg:w="27"/><text x="82.1851%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (27 samples, 0.14%)</title><rect x="81.9351%" y="229" width="0.1435%" height="15" fill="rgb(242,28,8)" fg:x="15412" fg:w="27"/><text x="82.1851%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (27 samples, 0.14%)</title><rect x="81.9351%" y="213" width="0.1435%" height="15" fill="rgb(219,106,18)" fg:x="15412" fg:w="27"/><text x="82.1851%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.14%)</title><rect x="81.9351%" y="197" width="0.1435%" height="15" fill="rgb(244,222,10)" fg:x="15412" fg:w="27"/><text x="82.1851%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.14%)</title><rect x="81.9405%" y="181" width="0.1382%" height="15" fill="rgb(236,179,52)" fg:x="15413" fg:w="26"/><text x="82.1905%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.14%)</title><rect x="81.9405%" y="165" width="0.1382%" height="15" fill="rgb(213,23,39)" fg:x="15413" fg:w="26"/><text x="82.1905%" y="175.50"></text></g><g><title>cfree (26 samples, 0.14%)</title><rect x="81.9405%" y="149" width="0.1382%" height="15" fill="rgb(238,48,10)" fg:x="15413" fg:w="26"/><text x="82.1905%" y="159.50"></text></g><g><title>[libc.so.6] (22 samples, 0.12%)</title><rect x="81.9617%" y="133" width="0.1170%" height="15" fill="rgb(251,196,23)" fg:x="15417" fg:w="22"/><text x="82.2117%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (43 samples, 0.23%)</title><rect x="82.0840%" y="213" width="0.2286%" height="15" fill="rgb(250,152,24)" fg:x="15440" fg:w="43"/><text x="82.3340%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (43 samples, 0.23%)</title><rect x="82.0840%" y="197" width="0.2286%" height="15" fill="rgb(209,150,17)" fg:x="15440" fg:w="43"/><text x="82.3340%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11 samples, 0.06%)</title><rect x="82.2541%" y="181" width="0.0585%" height="15" fill="rgb(234,202,34)" fg:x="15472" fg:w="11"/><text x="82.5041%" y="191.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (4 samples, 0.02%)</title><rect x="82.3126%" y="181" width="0.0213%" height="15" fill="rgb(253,148,53)" fg:x="15483" fg:w="4"/><text x="82.5626%" y="191.50"></text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (12 samples, 0.06%)</title><rect x="82.3339%" y="181" width="0.0638%" height="15" fill="rgb(218,129,16)" fg:x="15487" fg:w="12"/><text x="82.5839%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.02%)</title><rect x="82.3977%" y="165" width="0.0159%" height="15" fill="rgb(216,85,19)" fg:x="15499" fg:w="3"/><text x="82.6477%" y="175.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="82.4030%" y="149" width="0.0106%" height="15" fill="rgb(235,228,7)" fg:x="15500" fg:w="2"/><text x="82.6530%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (2 samples, 0.01%)</title><rect x="82.4030%" y="133" width="0.0106%" height="15" fill="rgb(245,175,0)" fg:x="15500" fg:w="2"/><text x="82.6530%" y="143.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axc (20 samples, 0.11%)</title><rect x="82.3126%" y="197" width="0.1063%" height="15" fill="rgb(208,168,36)" fg:x="15483" fg:w="20"/><text x="82.5626%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.02%)</title><rect x="82.3977%" y="181" width="0.0213%" height="15" fill="rgb(246,171,24)" fg:x="15499" fg:w="4"/><text x="82.6477%" y="191.50"></text></g><g><title>&lt;u32 as core::ops::arith::Add&gt;::add (850 samples, 4.52%)</title><rect x="85.5502%" y="181" width="4.5189%" height="15" fill="rgb(215,142,24)" fg:x="16092" fg:w="850"/><text x="85.8002%" y="191.50">&lt;u32 ..</text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (1,350 samples, 7.18%)</title><rect x="90.0691%" y="181" width="7.1770%" height="15" fill="rgb(250,187,7)" fg:x="16942" fg:w="1350"/><text x="90.3191%" y="191.50">&lt;u32 as co..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (148 samples, 0.79%)</title><rect x="97.8575%" y="149" width="0.7868%" height="15" fill="rgb(228,66,33)" fg:x="18407" fg:w="148"/><text x="98.1075%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (148 samples, 0.79%)</title><rect x="97.8575%" y="133" width="0.7868%" height="15" fill="rgb(234,215,21)" fg:x="18407" fg:w="148"/><text x="98.1075%" y="143.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (3,074 samples, 16.34%)</title><rect x="82.4189%" y="197" width="16.3424%" height="15" fill="rgb(222,191,20)" fg:x="15503" fg:w="3074"/><text x="82.6689%" y="207.50">nalgebra::base::blas_unin..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (285 samples, 1.52%)</title><rect x="97.2461%" y="181" width="1.5152%" height="15" fill="rgb(245,79,54)" fg:x="18292" fg:w="285"/><text x="97.4961%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (285 samples, 1.52%)</title><rect x="97.2461%" y="165" width="1.5152%" height="15" fill="rgb(240,10,37)" fg:x="18292" fg:w="285"/><text x="97.4961%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (22 samples, 0.12%)</title><rect x="98.6443%" y="149" width="0.1170%" height="15" fill="rgb(214,192,32)" fg:x="18555" fg:w="22"/><text x="98.8943%" y="159.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (3,205 samples, 17.04%)</title><rect x="82.0787%" y="245" width="17.0388%" height="15" fill="rgb(209,36,54)" fg:x="15439" fg:w="3205"/><text x="82.3287%" y="255.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (3,205 samples, 17.04%)</title><rect x="82.0787%" y="229" width="17.0388%" height="15" fill="rgb(220,10,11)" fg:x="15439" fg:w="3205"/><text x="82.3287%" y="239.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (3,161 samples, 16.80%)</title><rect x="82.3126%" y="213" width="16.8049%" height="15" fill="rgb(221,106,17)" fg:x="15483" fg:w="3161"/><text x="82.5626%" y="223.50">nalgebra::base::blas_unini..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (67 samples, 0.36%)</title><rect x="98.7613%" y="197" width="0.3562%" height="15" fill="rgb(251,142,44)" fg:x="18577" fg:w="67"/><text x="99.0113%" y="207.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,R,C&gt;&gt;::BufferUninit&gt;&gt;::uninit (35 samples, 0.19%)</title><rect x="99.1175%" y="245" width="0.1861%" height="15" fill="rgb(238,13,15)" fg:x="18644" fg:w="35"/><text x="99.3675%" y="255.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,C&gt;&gt;::allocate_uninit (35 samples, 0.19%)</title><rect x="99.1175%" y="229" width="0.1861%" height="15" fill="rgb(208,107,27)" fg:x="18644" fg:w="35"/><text x="99.3675%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (23 samples, 0.12%)</title><rect x="99.1813%" y="213" width="0.1223%" height="15" fill="rgb(205,136,37)" fg:x="18656" fg:w="23"/><text x="99.4313%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (23 samples, 0.12%)</title><rect x="99.1813%" y="197" width="0.1223%" height="15" fill="rgb(250,205,27)" fg:x="18656" fg:w="23"/><text x="99.4313%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (22 samples, 0.12%)</title><rect x="99.1866%" y="181" width="0.1170%" height="15" fill="rgb(210,80,43)" fg:x="18657" fg:w="22"/><text x="99.4366%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (22 samples, 0.12%)</title><rect x="99.1866%" y="165" width="0.1170%" height="15" fill="rgb(247,160,36)" fg:x="18657" fg:w="22"/><text x="99.4366%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.12%)</title><rect x="99.1866%" y="149" width="0.1170%" height="15" fill="rgb(234,13,49)" fg:x="18657" fg:w="22"/><text x="99.4366%" y="159.50"></text></g><g><title>malloc (20 samples, 0.11%)</title><rect x="99.1972%" y="133" width="0.1063%" height="15" fill="rgb(234,122,0)" fg:x="18659" fg:w="20"/><text x="99.4472%" y="143.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,241 samples, 17.23%)</title><rect x="82.0787%" y="261" width="17.2302%" height="15" fill="rgb(207,146,38)" fg:x="15439" fg:w="3241"/><text x="82.3287%" y="271.50">nalgebra::base::ops::&lt;impl ..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,272 samples, 17.40%)</title><rect x="81.9245%" y="277" width="17.3950%" height="15" fill="rgb(207,177,25)" fg:x="15410" fg:w="3272"/><text x="82.1745%" y="287.50">nalgebra::base::ops::&lt;impl ..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (2 samples, 0.01%)</title><rect x="99.3089%" y="261" width="0.0106%" height="15" fill="rgb(211,178,42)" fg:x="18680" fg:w="2"/><text x="99.5589%" y="271.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.23%)</title><rect x="99.3993%" y="261" width="0.2286%" height="15" fill="rgb(230,69,54)" fg:x="18697" fg:w="43"/><text x="99.6493%" y="271.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new (3 samples, 0.02%)</title><rect x="99.6279%" y="261" width="0.0159%" height="15" fill="rgb(214,135,41)" fg:x="18740" fg:w="3"/><text x="99.8779%" y="271.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::new_inclusive (3 samples, 0.02%)</title><rect x="99.6279%" y="245" width="0.0159%" height="15" fill="rgb(237,67,25)" fg:x="18740" fg:w="3"/><text x="99.8779%" y="255.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (4 samples, 0.02%)</title><rect x="99.6438%" y="261" width="0.0213%" height="15" fill="rgb(222,189,50)" fg:x="18743" fg:w="4"/><text x="99.8938%" y="271.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.02%)</title><rect x="99.6438%" y="245" width="0.0213%" height="15" fill="rgb(245,148,34)" fg:x="18743" fg:w="4"/><text x="99.8938%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.02%)</title><rect x="99.7927%" y="245" width="0.0213%" height="15" fill="rgb(222,29,6)" fg:x="18771" fg:w="4"/><text x="100.0427%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.18%)</title><rect x="99.6651%" y="261" width="0.1808%" height="15" fill="rgb(221,189,43)" fg:x="18747" fg:w="34"/><text x="99.9151%" y="271.50"></text></g><g><title>core::ptr::write (6 samples, 0.03%)</title><rect x="99.8139%" y="245" width="0.0319%" height="15" fill="rgb(207,36,27)" fg:x="18775" fg:w="6"/><text x="100.0639%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="99.8458%" y="261" width="0.0106%" height="15" fill="rgb(217,90,24)" fg:x="18781" fg:w="2"/><text x="100.0958%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="99.8458%" y="245" width="0.0106%" height="15" fill="rgb(224,66,35)" fg:x="18781" fg:w="2"/><text x="100.0958%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="99.8458%" y="229" width="0.0106%" height="15" fill="rgb(221,13,50)" fg:x="18781" fg:w="2"/><text x="100.0958%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="99.8458%" y="213" width="0.0106%" height="15" fill="rgb(236,68,49)" fg:x="18781" fg:w="2"/><text x="100.0958%" y="223.50"></text></g><g><title>battleship::game::InternalPlayer&lt;T&gt;::take_shot (4,631 samples, 24.62%)</title><rect x="75.2525%" y="309" width="24.6199%" height="15" fill="rgb(229,146,28)" fg:x="14155" fg:w="4631"/><text x="75.5025%" y="319.50">battleship::game::InternalPlayer&lt;T&gt;::ta..</text></g><g><title>&lt;battleship::ai_player::AIPlayer as battleship::game::Player&gt;::take_shot (4,631 samples, 24.62%)</title><rect x="75.2525%" y="293" width="24.6199%" height="15" fill="rgb(225,31,38)" fg:x="14155" fg:w="4631"/><text x="75.5025%" y="303.50">&lt;battleship::ai_player::AIPlayer as bat..</text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (104 samples, 0.55%)</title><rect x="99.3195%" y="277" width="0.5529%" height="15" fill="rgb(250,208,3)" fg:x="18682" fg:w="104"/><text x="99.5695%" y="287.50"></text></g><g><title>rand::distributions::weighted_index::WeightedIndex&lt;X&gt;::new (3 samples, 0.02%)</title><rect x="99.8565%" y="261" width="0.0159%" height="15" fill="rgb(246,54,23)" fg:x="18783" fg:w="3"/><text x="100.1065%" y="271.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (18,595 samples, 98.86%)</title><rect x="1.0260%" y="901" width="98.8570%" height="15" fill="rgb(243,76,11)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="911.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (18,595 samples, 98.86%)</title><rect x="1.0260%" y="885" width="98.8570%" height="15" fill="rgb(245,21,50)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="895.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (18,595 samples, 98.86%)</title><rect x="1.0260%" y="869" width="98.8570%" height="15" fill="rgb(228,9,43)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="879.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::unwind::halt_unwinding (18,595 samples, 98.86%)</title><rect x="1.0260%" y="853" width="98.8570%" height="15" fill="rgb(208,100,47)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="863.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (18,595 samples, 98.86%)</title><rect x="1.0260%" y="837" width="98.8570%" height="15" fill="rgb(232,26,8)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (18,595 samples, 98.86%)</title><rect x="1.0260%" y="821" width="98.8570%" height="15" fill="rgb(216,166,38)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,595 samples, 98.86%)</title><rect x="1.0260%" y="805" width="98.8570%" height="15" fill="rgb(251,202,51)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="815.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18,595 samples, 98.86%)</title><rect x="1.0260%" y="789" width="98.8570%" height="15" fill="rgb(254,216,34)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="799.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (18,595 samples, 98.86%)</title><rect x="1.0260%" y="773" width="98.8570%" height="15" fill="rgb(251,32,27)" fg:x="193" fg:w="18595"/><text x="1.2760%" y="783.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}}</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="757" width="24.6571%" height="15" fill="rgb(208,127,28)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="767.50">rayon_core::registry::Registry::in_work..</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="741" width="24.6571%" height="15" fill="rgb(224,137,22)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="751.50">rayon_core::join::join_context::{{closu..</text></g><g><title>rayon_core::unwind::halt_unwinding (4,638 samples, 24.66%)</title><rect x="75.2259%" y="725" width="24.6571%" height="15" fill="rgb(254,70,32)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="735.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (4,638 samples, 24.66%)</title><rect x="75.2259%" y="709" width="24.6571%" height="15" fill="rgb(229,75,37)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,638 samples, 24.66%)</title><rect x="75.2259%" y="693" width="24.6571%" height="15" fill="rgb(252,64,23)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,638 samples, 24.66%)</title><rect x="75.2259%" y="677" width="24.6571%" height="15" fill="rgb(232,162,48)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,638 samples, 24.66%)</title><rect x="75.2259%" y="661" width="24.6571%" height="15" fill="rgb(246,160,12)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="645" width="24.6571%" height="15" fill="rgb(247,166,0)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="655.50">rayon_core::join::join_context::call_a:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="629" width="24.6571%" height="15" fill="rgb(249,219,21)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="639.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,638 samples, 24.66%)</title><rect x="75.2259%" y="613" width="24.6571%" height="15" fill="rgb(205,209,3)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="623.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon_core::join::join_context (4,638 samples, 24.66%)</title><rect x="75.2259%" y="597" width="24.6571%" height="15" fill="rgb(243,44,1)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="607.50">rayon_core::join::join_context</text></g><g><title>rayon_core::registry::in_worker (4,638 samples, 24.66%)</title><rect x="75.2259%" y="581" width="24.6571%" height="15" fill="rgb(206,159,16)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="591.50">rayon_core::registry::in_worker</text></g><g><title>rayon_core::join::join_context::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="565" width="24.6571%" height="15" fill="rgb(244,77,30)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="575.50">rayon_core::join::join_context::{{closu..</text></g><g><title>rayon_core::unwind::halt_unwinding (4,638 samples, 24.66%)</title><rect x="75.2259%" y="549" width="24.6571%" height="15" fill="rgb(218,69,12)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="559.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (4,638 samples, 24.66%)</title><rect x="75.2259%" y="533" width="24.6571%" height="15" fill="rgb(212,87,7)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,638 samples, 24.66%)</title><rect x="75.2259%" y="517" width="24.6571%" height="15" fill="rgb(245,114,25)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,638 samples, 24.66%)</title><rect x="75.2259%" y="501" width="24.6571%" height="15" fill="rgb(210,61,42)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,638 samples, 24.66%)</title><rect x="75.2259%" y="485" width="24.6571%" height="15" fill="rgb(211,52,33)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwind..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="469" width="24.6571%" height="15" fill="rgb(234,58,33)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="479.50">rayon_core::join::join_context::call_a:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="453" width="24.6571%" height="15" fill="rgb(220,115,36)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="463.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (4,638 samples, 24.66%)</title><rect x="75.2259%" y="437" width="24.6571%" height="15" fill="rgb(243,153,54)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="447.50">rayon::iter::plumbing::bridge_producer_..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (4,638 samples, 24.66%)</title><rect x="75.2259%" y="421" width="24.6571%" height="15" fill="rgb(251,47,18)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="431.50">rayon::iter::plumbing::Producer::fold_w..</text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (4,638 samples, 24.66%)</title><rect x="75.2259%" y="405" width="24.6571%" height="15" fill="rgb(242,102,42)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="415.50">&lt;rayon::iter::for_each::ForEachConsumer..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4,638 samples, 24.66%)</title><rect x="75.2259%" y="389" width="24.6571%" height="15" fill="rgb(234,31,38)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="399.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (4,638 samples, 24.66%)</title><rect x="75.2259%" y="373" width="24.6571%" height="15" fill="rgb(221,117,51)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="383.50">core::ops::function::impls::&lt;impl core:..</text></g><g><title>battleship::run_for::{{closure}} (4,638 samples, 24.66%)</title><rect x="75.2259%" y="357" width="24.6571%" height="15" fill="rgb(212,20,18)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="367.50">battleship::run_for::{{closure}}</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_for (4,638 samples, 24.66%)</title><rect x="75.2259%" y="341" width="24.6571%" height="15" fill="rgb(245,133,36)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="351.50">battleship::game::BattleshipGame&lt;A,B&gt;::..</text></g><g><title>battleship::game::BattleshipGame&lt;A,B&gt;::run_game (4,638 samples, 24.66%)</title><rect x="75.2259%" y="325" width="24.6571%" height="15" fill="rgb(212,6,19)" fg:x="14150" fg:w="4638"/><text x="75.4759%" y="335.50">battleship::game::BattleshipGame&lt;A,B&gt;::..</text></g><g><title>battleship::game::TargetBoard::check_hit (2 samples, 0.01%)</title><rect x="99.8724%" y="309" width="0.0106%" height="15" fill="rgb(218,1,36)" fg:x="18786" fg:w="2"/><text x="100.1224%" y="319.50"></text></g><g><title>std::sys::unix::futex::futex_wait (19 samples, 0.10%)</title><rect x="99.8937%" y="805" width="0.1010%" height="15" fill="rgb(246,84,54)" fg:x="18790" fg:w="19"/><text x="100.1437%" y="815.50"></text></g><g><title>syscall (19 samples, 0.10%)</title><rect x="99.8937%" y="789" width="0.1010%" height="15" fill="rgb(242,110,6)" fg:x="18790" fg:w="19"/><text x="100.1437%" y="799.50"></text></g><g><title>all (18,810 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(214,47,5)" fg:x="0" fg:w="18810"/><text x="0.2500%" y="1231.50"></text></g><g><title>battleship (18,810 samples, 100.00%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(218,159,25)" fg:x="0" fg:w="18810"/><text x="0.2500%" y="1215.50">battleship</text></g><g><title>__clone (18,699 samples, 99.41%)</title><rect x="0.5901%" y="1189" width="99.4099%" height="15" fill="rgb(215,211,28)" fg:x="111" fg:w="18699"/><text x="0.8401%" y="1199.50">__clone</text></g><g><title>[libc.so.6] (18,643 samples, 99.11%)</title><rect x="0.8878%" y="1173" width="99.1122%" height="15" fill="rgb(238,59,32)" fg:x="167" fg:w="18643"/><text x="1.1378%" y="1183.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1157" width="99.0909%" height="15" fill="rgb(226,82,3)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1167.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1141" width="99.0909%" height="15" fill="rgb(240,164,32)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1151.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1125" width="99.0909%" height="15" fill="rgb(232,46,7)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1109" width="99.0909%" height="15" fill="rgb(229,129,53)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1119.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1093" width="99.0909%" height="15" fill="rgb(234,188,29)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1103.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1077" width="99.0909%" height="15" fill="rgb(246,141,4)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1061" width="99.0909%" height="15" fill="rgb(229,23,39)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1045" width="99.0909%" height="15" fill="rgb(206,12,3)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1029" width="99.0909%" height="15" fill="rgb(252,226,20)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1039.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (18,639 samples, 99.09%)</title><rect x="0.9091%" y="1013" width="99.0909%" height="15" fill="rgb(216,123,35)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1023.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,639 samples, 99.09%)</title><rect x="0.9091%" y="997" width="99.0909%" height="15" fill="rgb(212,68,40)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="1007.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (18,639 samples, 99.09%)</title><rect x="0.9091%" y="981" width="99.0909%" height="15" fill="rgb(254,125,32)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="991.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (18,639 samples, 99.09%)</title><rect x="0.9091%" y="965" width="99.0909%" height="15" fill="rgb(253,97,22)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="975.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (18,639 samples, 99.09%)</title><rect x="0.9091%" y="949" width="99.0909%" height="15" fill="rgb(241,101,14)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="959.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (18,639 samples, 99.09%)</title><rect x="0.9091%" y="933" width="99.0909%" height="15" fill="rgb(238,103,29)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="943.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (18,639 samples, 99.09%)</title><rect x="0.9091%" y="917" width="99.0909%" height="15" fill="rgb(233,195,47)" fg:x="171" fg:w="18639"/><text x="1.1591%" y="927.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::no_work_found (22 samples, 0.12%)</title><rect x="99.8830%" y="901" width="0.1170%" height="15" fill="rgb(246,218,30)" fg:x="18788" fg:w="22"/><text x="100.1330%" y="911.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (21 samples, 0.11%)</title><rect x="99.8884%" y="885" width="0.1116%" height="15" fill="rgb(219,145,47)" fg:x="18789" fg:w="21"/><text x="100.1384%" y="895.50"></text></g><g><title>std::sync::condvar::Condvar::wait (20 samples, 0.11%)</title><rect x="99.8937%" y="869" width="0.1063%" height="15" fill="rgb(243,12,26)" fg:x="18790" fg:w="20"/><text x="100.1437%" y="879.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (20 samples, 0.11%)</title><rect x="99.8937%" y="853" width="0.1063%" height="15" fill="rgb(214,87,16)" fg:x="18790" fg:w="20"/><text x="100.1437%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (20 samples, 0.11%)</title><rect x="99.8937%" y="837" width="0.1063%" height="15" fill="rgb(208,99,42)" fg:x="18790" fg:w="20"/><text x="100.1437%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (20 samples, 0.11%)</title><rect x="99.8937%" y="821" width="0.1063%" height="15" fill="rgb(253,99,2)" fg:x="18790" fg:w="20"/><text x="100.1437%" y="831.50"></text></g></svg></svg>